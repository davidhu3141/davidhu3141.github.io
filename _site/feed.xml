<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AutoDavid&#39;s Blog</title>
    <description>這裡會發一些關於數學、代數拓撲、範疇論、計算機科學的廢文或繪圖，跟寫一些沒用的小品程式。
</description>
    <link>http://davidhu3141.github.io/</link>
    <atom:link href="http://davidhu3141.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 12 Nov 2017 21:25:48 +0800</pubDate>
    <lastBuildDate>Sun, 12 Nov 2017 21:25:48 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>曲面與曲線</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;曲面與曲線&lt;/h1&gt;

&lt;p&gt;以往的積分都是沿著實數軸，其實也可以在平面上取一條曲線，沿著它積分。（線積分 line integral）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/fExv4C6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不過在學習線積分之前，我們需要引入一些幾何學上的新物件，它們分別是&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;曲面（surface）&lt;/li&gt;
  &lt;li&gt;曲線參數式（parametrization of a curve）
&lt;!-- - 向量場（vector field）--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;座標平面的慣用記號是 &lt;script type=&quot;math/tex&quot;&gt;\mathbb R^2&lt;/script&gt;，空間則是 &lt;script type=&quot;math/tex&quot;&gt;\mathbb R^3&lt;/script&gt;，這樣寫帶有積集合（&lt;a href=&quot;https://en.wikipedia.org/wiki/Cartesian_product&quot;&gt;Cartesian product&lt;/a&gt;）的感覺。&lt;/p&gt;

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h2 id=&quot;real-valued-functions-on-the-x-y-plane&quot;&gt;平面上的實值函數（Real valued functions on the x-y plane）&lt;/h2&gt;

&lt;p&gt;給一個座標平面 &lt;script type=&quot;math/tex&quot;&gt;\mathbb R^2 = \{(x,y)\ |\ x,y\in\mathbb R\}&lt;/script&gt;，若其上的每個點都有一個實數的函數值 &lt;script type=&quot;math/tex&quot;&gt;f(x,y)&lt;/script&gt;，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ZdXpryK.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那麼這就是個平面上的實值函數：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f:\mathbb R^2\to\mathbb R&lt;/script&gt;

&lt;p&gt;它的函數圖形就會像上圖一樣，是個曲面。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;一些例子&lt;/h3&gt;

&lt;h4 id=&quot;section-2&quot;&gt;例 1&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;思考下列這個曲面的樣子（也可以自己畫畫看）：&lt;/p&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt;z=f(x,y)=x^2+y^2&lt;/script&gt;

&lt;/blockquote&gt;

&lt;p&gt;形狀不好想的話，可以先畫等高線：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/stLpxdW.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這是個&lt;strong&gt;旋轉拋物面&lt;/strong&gt;（paraboloid  of revolution），左邊的三個圓分別是 &lt;script type=&quot;math/tex&quot;&gt;z=x^2+y^2=1,4,9&lt;/script&gt; 的情況。&lt;/p&gt;

&lt;p&gt;如果定義平面上到原點的距離為 &lt;script type=&quot;math/tex&quot;&gt;r=\sqrt{x^2+y^2}&lt;/script&gt;，那麼剛剛的 &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; 函數也可以看成&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;z=f(x,y)=r^2&lt;/script&gt;

&lt;p&gt;，只要到原點的距離一樣，&lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt; 高度就一樣。這說明了&lt;strong&gt;旋轉拋物面&lt;/strong&gt;是由&lt;strong&gt;拋物線&lt;/strong&gt;（parabola）沿著對稱軸旋轉一圈而成的。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;例 2&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;利用這個&lt;a href=&quot;https://academo.org/demos/3d-surface-plotter/?expression=x*x-y*y&amp;amp;xRange=-5%2C%2B5&amp;amp;yRange=-5%2C%2B5&amp;amp;resolution=25&quot;&gt;網站&lt;/a&gt;工具觀察下列五個曲面的樣子：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;鞍面：&lt;script type=&quot;math/tex; mode=display&quot;&gt;z=f(x,y)=x^2-y^2&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;與 &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; 無關的面：&lt;script type=&quot;math/tex; mode=display&quot;&gt;z=f(x,y)=x^2&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;在 &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; 方向是一次的面：&lt;script type=&quot;math/tex; mode=display&quot;&gt;z=f(x,y)=x^2+y&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;平面 &lt;script type=&quot;math/tex&quot;&gt;x+y+z=1&lt;/script&gt;：&lt;script type=&quot;math/tex; mode=display&quot;&gt;z=f(x,y)=1-x-y&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;解釋為甚麼這是圓錐：&lt;script type=&quot;math/tex; mode=display&quot;&gt;z=f(x,y)=\sqrt{x^2+y^2}&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看完之後照著畫畫看，並思考它們的等高線長怎樣。&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;例 3&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;看看下列兩式的圖形： &lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{aligned}z&amp;amp;=\sin x\cdot\sin y\\ z&amp;amp;=xy-\frac{yx^3+xy^3}{6}\end{aligned}&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;它們分別長這樣：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/bDwnv9g.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;兩者長得有點像，在接近中心處幾乎是一模一樣的。雖然兩者之間有一點關聯&lt;sup id=&quot;fnref:Taylor&quot;&gt;&lt;a href=&quot;#fn:Taylor&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;，但放在這裡只是因為它們長得滿好看的。&lt;/p&gt;

&lt;p&gt;對於右圖，我以前寫過一個&lt;a href=&quot;http://davidhu3141.github.io/OpenzFunction/index.html&quot;&gt;程式&lt;/a&gt;來計算它的紙模型的展開圖，並做出來，還滿有趣的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/davidhu3141/OpenzFunction/master/Sample/Faked.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;曲線參數式&lt;/h2&gt;

&lt;p&gt;曲線可以視為物體運動的軌跡&lt;sup id=&quot;fnref:curve_motion&quot;&gt;&lt;a href=&quot;#fn:curve_motion&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;，例如平面上&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;(x,y)=(t, 2t-t^2)&lt;/script&gt;

&lt;p&gt;是個拋物線的軌跡。透過將 &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt; 改成 &lt;script type=&quot;math/tex&quot;&gt;2t&lt;/script&gt;，我們也可以把曲線改寫成&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;(x,y)=(2t, 4t-4t^2)&lt;/script&gt;

&lt;p&gt;兩者代表的圖形是一樣的，只是運動速度變兩倍而已。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/kVxW4z0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一般將 &lt;script type=&quot;math/tex&quot;&gt;t=0&lt;/script&gt; 的位置看成是運動的起點。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;從參數式得到方程式&lt;/h3&gt;

&lt;p&gt;上面的例子，透過將兩式&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{aligned} x&amp;=t\\ y&amp;=2t-t^2 \end{aligned}&lt;/script&gt;

&lt;p&gt;消去 &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;，就可得到曲線的方程式 &lt;script type=&quot;math/tex; mode=display&quot;&gt;y=2x-x^2.&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;從參數式化為方程式之後，關於速度、運動方向、起點等訊息都消失了。&lt;/p&gt;

&lt;h4 id=&quot;section-7&quot;&gt;例 4&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;將下列參數式消去 &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;：&lt;/p&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{aligned}x=\sin t\\ y=\cos t\end{aligned}&lt;/script&gt;

&lt;/blockquote&gt;

&lt;p&gt;用平方關係消掉 &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt; 就好了，答案是&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt; x^2+y^2=1&lt;/script&gt;

&lt;p&gt;因此是個圓。這個參數式代表的是：「以 &lt;script type=&quot;math/tex&quot;&gt;(0,1)&lt;/script&gt; 為起點，順時針巡行單位圓」。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/hj2p3J1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-8&quot;&gt;例 5&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;將下列參數式消去 &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;：&lt;/p&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{aligned}x=\sin^2 t\\ y=\cos^2 t\end{aligned}&lt;/script&gt;

&lt;/blockquote&gt;

&lt;p&gt;可想而知，兩式相加可得到 &lt;script type=&quot;math/tex&quot;&gt;x+y=1&lt;/script&gt;，不過我們只能取一部份而已：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x+y=1\ \ ,\ \ \left\{\begin{aligned}0\leq x\leq 1\\ 0\leq y\leq 1\end{aligned}\right.&lt;/script&gt;

&lt;p&gt;因此軌跡是個線段&lt;sup id=&quot;fnref:SHM&quot;&gt;&lt;a href=&quot;#fn:SHM&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;，並不是整個直線。這說明了消去 &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt; 的手段有時候會誤導人。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Wh491KN.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;空間中的曲線&lt;/h3&gt;

&lt;h4 id=&quot;section-10&quot;&gt;例 6&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;試解釋參數式 &lt;script type=&quot;math/tex; mode=display&quot;&gt;(x,y,z)=(\cos t, \sin t, \frac t{10})&lt;/script&gt; 是個三維空間中的彈簧線。試想彈簧線投影到 &lt;script type=&quot;math/tex&quot;&gt;x-z&lt;/script&gt; 平面所能得到的二維圖形。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;應該難不倒你。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/GXGW98L.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;參數式的本質&lt;/h3&gt;

&lt;p&gt;本質上，平面上的曲線 &lt;script type=&quot;math/tex&quot;&gt;\Gamma&lt;/script&gt; 的參數式是個把實數 &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt; 變成座標 &lt;script type=&quot;math/tex&quot;&gt;(x,y)&lt;/script&gt; 的函數&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Gamma:\mathbb R\to \mathbb R^2&lt;/script&gt;

&lt;p&gt;用函數將一條實數軸打到平面上，自然就變成曲線了。&lt;/p&gt;

&lt;!-- 實值函數的線積分
-------------

有了曲面（被積函數）與平面上的曲線（路徑），我們就可以做一些線積分了。有時候線積分也被稱為路徑積分（path integral）。

沿著一條平面上的曲線 &lt;script type=&quot;math/tex&quot;&gt;\Gamma(t)=(x(t),y(t))&lt;/script&gt;，積一個平面上的實質函數 &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;，要記成這樣：

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int_\Gamma f(x,y)\ ds&lt;/script&gt;

其代表著下圖紅色片狀物的面積

![](https://i.imgur.com/gzr7Tny.jpg)

雖然 &lt;script type=&quot;math/tex&quot;&gt;ds&lt;/script&gt; 在曲線上，但式子中的 &lt;script type=&quot;math/tex&quot;&gt;ds&lt;/script&gt; 看起來跟曲線 &lt;script type=&quot;math/tex&quot;&gt;\Gamma(t)&lt;/script&gt; 搭不上關係。我們要透過下列的取代：

&lt;script type=&quot;math/tex; mode=display&quot;&gt;dx=x&#39;(t)\ dt\\ dy=y&#39;(t)\ dt\\ ds=\sqrt{(dx)^2+(dy)^2} = \sqrt{x&#39;(t)^2+y&#39;(t)^2}\ dt&lt;/script&gt;

才能做計算。最後一個式子指的是下圖的概念：微小的弧長 &lt;script type=&quot;math/tex&quot;&gt;ds&lt;/script&gt; 能由 &lt;script type=&quot;math/tex&quot;&gt;x,y&lt;/script&gt; 方向的微小變化量用畢氏定理算出。

![](https://i.imgur.com/IxAyyBr.jpg)

&lt;script type=&quot;math/tex; mode=display&quot;&gt;ds:\textrm{small length traveled within }dt&lt;/script&gt;

現在來算算看：

#### 例 7

&gt;計算線積分 
&gt;
&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int_\Gamma (2x+y)\ ds&lt;/script&gt;
&gt;
&gt;，其中曲線 &lt;script type=&quot;math/tex&quot;&gt;\Gamma&lt;/script&gt; 由下列的參數式給出：
&gt;
&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Gamma(t)=(x(t), y(t))=(t, 2t-t^2)&lt;/script&gt;
&gt;
&gt;，而 &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt; 的範圍是
&gt;
&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;0\leq t\leq 2&lt;/script&gt;

 &lt;script type=&quot;math/tex&quot;&gt;\Gamma&lt;/script&gt; 是拋物線的一段，而 &lt;script type=&quot;math/tex&quot;&gt;z=2x+y&lt;/script&gt; 則是一個平面。

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int_\Gamma &lt;/script&gt; --&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:Taylor&quot;&gt;
      &lt;p&gt;事實上右圖是左圖在原點的二維泰勒逼近（Taylor approximation），因此在原點附近的行為很像。 &lt;a href=&quot;#fnref:Taylor&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:curve_motion&quot;&gt;
      &lt;p&gt;這其實也不太一定，像 &lt;a href=&quot;https://en.wikipedia.org/wiki/Koch_snowflake&quot;&gt;Koch snowflake&lt;/a&gt; 每一小段都是無窮長的，不是運動的軌跡。 &lt;a href=&quot;#fnref:curve_motion&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:SHM&quot;&gt;
      &lt;p&gt;這剛好是簡諧運動（&lt;strong&gt;S&lt;/strong&gt;imple &lt;strong&gt;H&lt;/strong&gt;armonic &lt;strong&gt;M&lt;/strong&gt;otion，SHM）。用二倍角公式降次可以發現 &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; 座標與 &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; 座標都是以某種關於 &lt;script type=&quot;math/tex&quot;&gt;\cos&lt;/script&gt; 的模式運動。 &lt;a href=&quot;#fnref:SHM&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 01 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://davidhu3141.github.io/%E9%AB%98%E4%B8%AD%E6%95%99%E6%9D%90/2017/08/01/%E6%9B%B2%E9%9D%A2%E8%88%87%E6%9B%B2%E7%B7%9A.html</link>
        <guid isPermaLink="true">http://davidhu3141.github.io/%E9%AB%98%E4%B8%AD%E6%95%99%E6%9D%90/2017/08/01/%E6%9B%B2%E9%9D%A2%E8%88%87%E6%9B%B2%E7%B7%9A.html</guid>
        
        
        <category>高中教材</category>
        
      </item>
    
      <item>
        <title>積分技巧：一次式除以二次式</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;積分技巧：一次式除以二次式&lt;/h1&gt;

&lt;p&gt;一次式除以二次式的積分 &lt;script type=&quot;math/tex; mode=display&quot;&gt;\int \frac{mx+n}{ax^2+bx+c} \mathop{dx}&lt;/script&gt;總是可以算。認知到這件事是很方便的，可以進一步推導出多項式除以多項式的積分的一般算法。&lt;/p&gt;

&lt;p&gt;分母是二次式時，情況分兩種：分母有實根，或沒有實根。我將示範兩種情況的算法。&lt;/p&gt;

&lt;!-- TOC --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#分母的二次式有兩實根&quot;&gt;分母的二次式有兩實根&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#部份分式&quot;&gt;部份分式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#sol&quot;&gt;Sol.&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#分母的二次式有重根&quot;&gt;分母的二次式有重根&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#分母的二次式沒有實根&quot;&gt;分母的二次式沒有實根&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#需要的公式&quot;&gt;需要的公式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#sol&quot;&gt;sol.&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#定理&quot;&gt;定理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#推論&quot;&gt;推論&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;h3 id=&quot;section-1&quot;&gt;分母的二次式有兩實根&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Find the anti-derivative: &lt;script type=&quot;math/tex; mode=display&quot;&gt;\int \frac{x+1}{x^2-4x+3} \mathop{dx} &lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;section-2&quot;&gt;部份分式&lt;/h4&gt;

&lt;p&gt;我們要先將分式拆成兩個小分式：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{x+1}{x^2-4x+3} =  \frac{x+1}{(x-3)(x-1)} = \frac{2}{x-3} - \frac{1}{x-1}&lt;/script&gt;

&lt;p&gt;上面的做法稱做部份分式（不是分部積分）。現在的課綱高一都不教這個了，不過這也不難。反正分母可以分解的話就一定可以拆成兩個分式。&lt;/p&gt;

&lt;p&gt;但是怎麼知道右式分子是多少？不知道的話只要假設 &lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{x+1}{x^2-4x+3} =\frac{A}{x-3} + \frac{B}{x-1}&lt;/script&gt;，右邊通分後與左式比較係數即可。&lt;/p&gt;

&lt;h4 id=&quot;sol&quot;&gt;Sol.&lt;/h4&gt;

&lt;p&gt;因此原式&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int \frac{3x+4}{x^2-4x+3} \mathop{dx} = \int \frac{2}{x-3} - \frac{1}{x-1} \mathop{dx}&lt;/script&gt;

&lt;p&gt;又我們有 &lt;script type=&quot;math/tex&quot;&gt;\int \frac{1}{x-a} \mathop{dx}=\operatorname{ln}(x-a) &lt;/script&gt;，因此&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int \frac{2}{x-3} - \frac{1}{x-1} \mathop{dx} = 2\ln |x-3| - \ln |x-1| + C.&lt;/script&gt;

&lt;p&gt;這樣就算完了。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;分母的二次式有重根&lt;/h3&gt;

&lt;p&gt;重根就好辦了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Find the anti-derivative: &lt;script type=&quot;math/tex; mode=display&quot;&gt;\int \frac{x-4}{(x-3)^2} \mathop{dx}&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;只要將分子寫成 &lt;script type=&quot;math/tex&quot;&gt;(x-3)&lt;/script&gt; 的多項式再拆開：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int \frac{x-4}{(x-3)^2} \mathop{dx} = \int \frac{(x-3)-1}{(x-3)^2} \mathop{dx} = \int (x-3)^{-1} - (x-3)^{-2} \mathop{dx}&lt;/script&gt;

&lt;p&gt;接下來跟多項式一樣，就不寫了。&lt;/p&gt;

&lt;p&gt;另一方面，要把它寫成部份分式也是可以的，但要假設它拆開後的形式為&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt; \frac{A}{(x-3)^2} + \frac{B}{(x-3)} &lt;/script&gt;

&lt;p&gt;再去通分比較係數。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;我也沒辦法找個自己滿意的答案來說服自己為甚麼要這樣做。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;分母的二次式沒有實根&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Find the anti-derivative:
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\int \frac{x+3}{x^2+2x+2}\ dx&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;section-5&quot;&gt;需要的公式&lt;/h4&gt;

&lt;p&gt;由於 &lt;script type=&quot;math/tex&quot;&gt;\int \frac{1}{1+x^2} \mathop{dx}= \arctan x&lt;/script&gt; ，因此令 &lt;script type=&quot;math/tex&quot;&gt;u=ax&lt;/script&gt;（&lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;是常數） 可以進一步推導出&lt;/p&gt;

&lt;blockquote&gt;
  &lt;script type=&quot;math/tex; mode=display&quot;&gt;\int \frac{1}{u^2 + a^2}\ du = \frac{1}{a}\arctan\frac{u}{a}&lt;/script&gt;

&lt;/blockquote&gt;

&lt;h4 id=&quot;sol-1&quot;&gt;sol.&lt;/h4&gt;

&lt;p&gt;先將分母配方，並且把分子處理一下：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt; \begin{aligned} \int \frac{x+3}{x^2+2x+2}\ dx &amp;= \int  \frac{(x+1)+2}{(x+1)^2+1}\ dx \\ &amp;= \int \frac{x+1}{(x+1)^2+1} + \frac{2}{(x+1)^2+1} \ dx \\ &amp;=  \int \frac{x+1}{(x+1)^2+1} \ dx + \int\frac{2}{(x+1)^2+1} \ dx\end{aligned}&lt;/script&gt;

&lt;p&gt;先處理左邊的 &lt;script type=&quot;math/tex&quot;&gt;\int \frac{x+1}{(x+1)^2+1}\ dx&lt;/script&gt;：利用 &lt;script type=&quot;math/tex&quot;&gt;d ((x+1)^2+1) = 2(x+1)\ dx&lt;/script&gt;，左邊&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt; \begin{aligned} \int  \frac{x+1}{(x+1)^2+1} \ dx &amp;= \frac12\int \frac{d ((x+1)^2+1)}{(x+1)^2+1} \\ &amp;= \frac12 \ln|(x+1)^2+1|+C \end{aligned}&lt;/script&gt;

&lt;p&gt;而右邊的 &lt;script type=&quot;math/tex&quot;&gt;\int\frac{2}{(x+1)^2+1}\ dx&lt;/script&gt; 就是用到剛剛的 &lt;script type=&quot;math/tex&quot;&gt;\arctan 公式&lt;/script&gt;。由於 &lt;script type=&quot;math/tex&quot;&gt;dx=d(x+1)&lt;/script&gt;，因此&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt; \begin{aligned} \int\frac{2}{(x+1)^2+1}\ dx &amp;= 2\int\frac{1}{(x+1)^2+1}\ d(x+1)\\ &amp;= 2\arctan (x+1)=C \end{aligned}&lt;/script&gt;

&lt;p&gt;因此結合以上的計算，答案是 &lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac12 \ln(x^2+2x+2)+2\arctan (x+1)+C.&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;定理&lt;/h3&gt;

&lt;p&gt;遇到一次式除以二次式，要算積分時：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;分母有兩實根 &lt;script type=&quot;math/tex&quot;&gt;\alpha, \beta&lt;/script&gt;，則分解分母，再用部分分式拆成兩個小的，積出兩個 &lt;script type=&quot;math/tex&quot;&gt;\ln.&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;分母有重根 &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt;，就把分子寫成 &lt;script type=&quot;math/tex&quot;&gt;(x-\alpha)&lt;/script&gt; 的多項式。&lt;/li&gt;
  &lt;li&gt;分母沒有實根，就把分母配方，積出一個 &lt;script type=&quot;math/tex&quot;&gt;\ln&lt;/script&gt; 與一個 &lt;script type=&quot;math/tex&quot;&gt;\arctan.&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;一次式除以二次式總是可以積分&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-7&quot;&gt;推論&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;多項式 / 二次式&lt;/strong&gt; 總是可以積分（用類似把假分數換成帶分數的方法，可以化成「多項式 + &lt;script type=&quot;math/tex&quot;&gt;\frac{一次式}{二次式}&lt;/script&gt;」）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;多項式 / 多項式&lt;/strong&gt; 總是可以積分（分母可以分解成一些一次式與二次式的乘積，再用部份分式化成 &lt;script type=&quot;math/tex&quot;&gt;\frac{一次式}{二次式} + \frac{一次式}{二次式} + \frac{常數}{一次式} + ...&lt;/script&gt;）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 11 May 2017 00:00:00 +0800</pubDate>
        <link>http://davidhu3141.github.io/%E9%AB%98%E4%B8%AD%E6%95%99%E6%9D%90/2017/05/11/%E7%A9%8D%E5%88%86%E6%8A%80%E5%B7%A7-%E4%B8%80%E6%AC%A1%E5%BC%8F%E9%99%A4%E4%BB%A5%E4%BA%8C%E6%AC%A1%E5%BC%8F.html</link>
        <guid isPermaLink="true">http://davidhu3141.github.io/%E9%AB%98%E4%B8%AD%E6%95%99%E6%9D%90/2017/05/11/%E7%A9%8D%E5%88%86%E6%8A%80%E5%B7%A7-%E4%B8%80%E6%AC%A1%E5%BC%8F%E9%99%A4%E4%BB%A5%E4%BA%8C%E6%AC%A1%E5%BC%8F.html</guid>
        
        
        <category>高中教材</category>
        
      </item>
    
      <item>
        <title>自由群</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;自由群&lt;/h1&gt;

&lt;p&gt;自由群是一種特殊的群，它的迷人之處在接下來會一一看到，不過在這之前要先刻畫一下自由群的樣貌。&lt;/p&gt;

&lt;!-- TOC --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#一定義&quot;&gt;一、定義&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#二就只是符號&quot;&gt;二、就只是符號&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#三自由群的凱萊圖-cayley-graph&quot;&gt;三、自由群的凱萊圖 (Cayley Graph)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#四群的展示-presentation-of-groups&quot;&gt;四、群的展示 (Presentation of Groups)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#五自由么半群&quot;&gt;五、自由么半群&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;p&gt;許多群都不是阿貝爾群，但我們仍能確定它的某些元素會滿足交換率，例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt; &lt;script type=&quot;math/tex&quot;&gt;a^{-1}\cdot a = e = a \cdot a^{-1}&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt; &lt;script type=&quot;math/tex&quot;&gt;a^3\cdot a^2 = a^5 = a^2\cdot a^3&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可見一個元素 &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; 與它的高次方 &lt;script type=&quot;math/tex&quot;&gt;a^n&lt;/script&gt; 或反元素的高次方 &lt;script type=&quot;math/tex&quot;&gt;a^{-m}&lt;/script&gt; 之間無可避免的會有交換率，在任何群都如此。&lt;/p&gt;

&lt;p&gt;而自由群某種意義上可以看成是一個交換率最少的群。除非滿足以上的情況，否則 &lt;script type=&quot;math/tex&quot;&gt;a\cdot b \neq b \cdot a&lt;/script&gt;。來看看它的定義。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;一、定義&lt;/h2&gt;

&lt;p&gt;給定一個字符的集合 &lt;script type=&quot;math/tex&quot;&gt;S=\{a, b, c, ...\}&lt;/script&gt; ，我們都可以用以下方法構造出一個群 &lt;script type=&quot;math/tex&quot;&gt;F_S&lt;/script&gt;，它是由字串構成的集合：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;規定 &lt;script type=&quot;math/tex&quot;&gt;a, b, c, ...&lt;/script&gt; 等字都是 &lt;script type=&quot;math/tex&quot;&gt;F_S&lt;/script&gt; 中的字串（只有一個字的字串）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;規定單位元素 &lt;script type=&quot;math/tex&quot;&gt;\varepsilon&lt;/script&gt; （空字串）與符號 &lt;script type=&quot;math/tex&quot;&gt;a^{-1}&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;b^{-1}&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;c^{-1}&lt;/script&gt; 也都是 &lt;script type=&quot;math/tex&quot;&gt;F_S&lt;/script&gt; 中的字串。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;兩個字串 &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; 和 &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; 的相乘結果定為新字串 &lt;script type=&quot;math/tex&quot;&gt;ab&lt;/script&gt; ，也就是單純串起來。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一個字串與其他字串相乘可以串成更長，如 &lt;script type=&quot;math/tex&quot;&gt;(ab)\cdot (c^{-1}a) = (abc^{-1}a)&lt;/script&gt; 這樣，越串越長。這些字串也在 &lt;script type=&quot;math/tex&quot;&gt;F_S&lt;/script&gt; 裡面。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果字串有相鄰的 &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; 與 &lt;script type=&quot;math/tex&quot;&gt;k^{-1}&lt;/script&gt; 則可以消掉，如 &lt;script type=&quot;math/tex&quot;&gt;a^{-1}b^{-1}bbc = a^{-1}bc&lt;/script&gt;，有相鄰的同樣字符也可以簡寫為次方，如 &lt;script type=&quot;math/tex&quot;&gt;abbba = ab^3a&lt;/script&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;這個 &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; 就稱為 &lt;script type=&quot;math/tex&quot;&gt;F_S&lt;/script&gt; 的生成集，&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; 的元素稱為生成元。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;二、就只是符號&lt;/h2&gt;

&lt;p&gt;注意到這些 &lt;script type=&quot;math/tex&quot;&gt;\{a, b, c, ..., a^{-1}, b^{-1}, c^{-1}, ... , ab, ab^{-1}a, bca^{-1}b^2, a^6...\}&lt;/script&gt; 都只是字串，而不是某個群中的未知數。然而特別的地方就是：即便我們把自由群運算規則中的 &lt;script type=&quot;math/tex&quot;&gt;a,b,c&lt;/script&gt; 等符號用其他群的元素取代，這些替換後的「句子」仍然有意義。&lt;/p&gt;

&lt;p&gt;例如把 &lt;script type=&quot;math/tex&quot;&gt;a,b,c&lt;/script&gt; 取代成 &lt;script type=&quot;math/tex&quot;&gt;\mathbb R_{&amp;gt;0}&lt;/script&gt; 乘法群中的元素 &lt;script type=&quot;math/tex&quot;&gt;3,2,4&lt;/script&gt;，那麼前面第 5 點的字串 &lt;script type=&quot;math/tex; mode=display&quot;&gt;a^{-1}b^{-1}bbc = a^{-1}bc&lt;/script&gt; 會被取代成 &lt;script type=&quot;math/tex; mode=display&quot;&gt; \frac{1}{3}\cdot\frac{1}{2}\cdot 2\cdot 2 \cdot 4 = \frac{1}{3} \cdot 2 \cdot 4 &lt;/script&gt;，果然左右算式的確是相等的，但那也只是消掉一組倒數而已。或許你會覺得這個取代後的實數乘法簡直是理所當然的廢話，那是因為替換前的字串就是記載著廢話的結構，自由群就是所有關於乘法（或加法）的廢話的蒐集。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;自由群 &lt;script type=&quot;math/tex&quot;&gt;F_S&lt;/script&gt; 利用符號在做一些「本來就會對」的乘法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這有時稱為自由群的泛性質，這裡暫時不介紹什麼是泛性質。&lt;/p&gt;

&lt;p&gt;不過取代的動作不能套用到不等式中。在自由群中 &lt;script type=&quot;math/tex&quot;&gt;ab \neq ba&lt;/script&gt;是相異的字串，但是照剛剛的取代 &lt;script type=&quot;math/tex&quot;&gt;3\cdot 2\neq 2\cdot 3&lt;/script&gt; 就錯了。&lt;/p&gt;

&lt;h2 id=&quot;cayley-graph&quot;&gt;三、自由群的凱萊圖 (Cayley Graph)&lt;/h2&gt;

&lt;p&gt;下列這張圖取自維基百科，是自由群 &lt;script type=&quot;math/tex&quot;&gt;F_{\{a,b\}}&lt;/script&gt; 的凱萊圖，上面每個頂點都代表 &lt;script type=&quot;math/tex&quot;&gt;F_{\{a,b\}}&lt;/script&gt; 中的一個字串：中心點是空字串，從中心往右邊走一個線段等於乘上 &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;，往左則是乘以 &lt;script type=&quot;math/tex&quot;&gt;a^{-1}&lt;/script&gt;；往上是乘以 &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt;，往下則是 &lt;script type=&quot;math/tex&quot;&gt;b^{-1}&lt;/script&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Cayley_graph_of_F2.svg/240px-Cayley_graph_of_F2.svg.png&quot; alt=&quot;cayley graph of free 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在圖中「向右再向上」與「向上再向右」會走到不同點，可見 &lt;script type=&quot;math/tex&quot;&gt;ab\neq ba&lt;/script&gt;。由於這個圖形是無限分支下去的，因此無論多長的字串，在圖中都找得到對應點，就照著字串上的行進方向一直走就是了。。&lt;/p&gt;

&lt;p&gt;這個圖形每個接口都是四叉路，如果換成三個生成元的自由群，圖形的每個接口就是六叉路；如果只有一個生成元，那這個自由群與無限循環群 &lt;script type=&quot;math/tex&quot;&gt;\mathbb Z&lt;/script&gt; 無異，圖形就是一直線。&lt;/p&gt;

&lt;p&gt;其實這張圖可以不用畫成碎形，但是為了在畫面上擠下這麼多分枝，通常都是會畫成碎形，而且也很好看。&lt;/p&gt;

&lt;h2 id=&quot;presentation-of-groups&quot;&gt;四、群的展示 (Presentation of Groups)&lt;/h2&gt;

&lt;p&gt;要寫出一個群，除了寫出它約定俗成的名稱（如 &lt;script type=&quot;math/tex&quot;&gt;\mathbb Z_2&lt;/script&gt;）或寫出它的凱萊表 (Cayley Table)，還有一個常用的方式是利用群的展示 (Presentation of Groups)：列出它的所有生成元 &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;、以及生成元之間該有的關係 &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt;，寫成 &lt;script type=&quot;math/tex&quot;&gt;\langle S|R \rangle&lt;/script&gt;。&lt;/p&gt;

&lt;p&gt;例如兩個無限循環群的直積 &lt;script type=&quot;math/tex&quot;&gt;\mathbb Z \otimes \mathbb Z &lt;/script&gt;，寫成 &lt;script type=&quot;math/tex&quot;&gt;\langle a,b\ |\ ab=ba\rangle&lt;/script&gt;，而有限循環群 &lt;script type=&quot;math/tex&quot;&gt;\mathbb{Z}_n&lt;/script&gt; 寫成 &lt;script type=&quot;math/tex&quot;&gt;\langle a\ |\ a^n=e\rangle&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;關於群的展示一言難盡，詳細說明可以看&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%BE%A4%E7%9A%84%E5%B1%95%E7%A4%BA&quot;&gt;維基百科：群的展示&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;方才說自由群 &lt;script type=&quot;math/tex&quot;&gt;F_S&lt;/script&gt; 是交換律最少的群，非不得已任兩個元素之間都沒有交換律（&lt;script type=&quot;math/tex&quot;&gt;ab&lt;/script&gt; 字串與 &lt;script type=&quot;math/tex&quot;&gt;ba&lt;/script&gt; 字串是不同字串），這可以看成自由群的生成元之間不存在任何關係，因此由 &lt;script type=&quot;math/tex&quot;&gt;S=\{a,b,c,...\}&lt;/script&gt; 生成的自由群 &lt;script type=&quot;math/tex&quot;&gt;F_S&lt;/script&gt; 寫起來就是 &lt;script type=&quot;math/tex&quot;&gt;\langle S\ |\ \varnothing\rangle&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;從凱萊圖上看起來，自由群的生成元之間不存在任何關係，代表它的凱萊圖上沒有迴路。當我們在寫其他群 &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; 的展示，其實是準備一個由 &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; 的生成元 &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; 生成的自由群 &lt;script type=&quot;math/tex&quot;&gt;F_S&lt;/script&gt;，再把 &lt;script type=&quot;math/tex&quot;&gt;F_S&lt;/script&gt; 的凱萊圖上的某些「樹枝」整捆整捆拗在一起。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;為了滿足封閉性就勉強把相加後的新元素（囫圇吞棗地）塞到這個群之中。&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;將自由群中的字串對應到其中&amp;lt;script type=&amp;quot;math/tex&amp;quot;&amp;gt;&#39;a&#39;&amp;lt;/script&amp;gt;這個字元的出現次數，而&amp;lt;script type=&amp;quot;math/tex&amp;quot;&amp;gt;a^{-1}&amp;lt;/script&amp;gt;出現的次數就算負的。這個對應&amp;lt;script type=&amp;quot;math/tex&amp;quot;&amp;gt;N_a(str)&amp;lt;/script&amp;gt;是一個到整數&amp;lt;script type=&amp;quot;math/tex&amp;quot;&amp;gt;(\mathbb{Z}, +)&amp;lt;/script&amp;gt;的同態，我們可以檢驗下面的例子：&amp;lt;script type=&amp;quot;math/tex; mode=display&amp;quot;&amp;gt;N_a(aabcaa) + N_a(a^{-1}bb) = 4 + (-1) = N_a(aabcaa \cdot a^{-1}bb)&amp;lt;/script&amp;gt;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;五、自由么半群&lt;/h2&gt;

&lt;p&gt;自由么半群的部份是針對電腦科學的討論，可以忽略。&lt;/p&gt;

&lt;p&gt;研究過計算理論或形式語言的同學可能會覺得自由群很像 regular expression 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 算符（Kleene star），例如 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a,b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;&lt;/code&gt; 會匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&#39;,a,b,ab,ba,aba,bab,bba,bbb,aab...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; 等所有字串。&lt;/p&gt;

&lt;p&gt;與自由群不同的是，利用 Kleene star 製造不出含有 &lt;script type=&quot;math/tex&quot;&gt;a^{-1}&lt;/script&gt;、&lt;script type=&quot;math/tex&quot;&gt;b^{-1}...&lt;/script&gt; 的字串，因此 Kleene star 並不會替你製造一個自由群：它製造的是「自由么半群」。所謂&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%B9%BA%E5%8D%8A%E7%BE%A4&quot;&gt;么半群&lt;/a&gt; (Monoid) 是一種比群更弱的結構，么半群中並不要求反元素的存在。&lt;/p&gt;

&lt;p&gt;除此之外 Kleene star 是給你一個集合，而不是代數結構，代表它製造出自由么半群之後便讓那個么半群忘掉自己的運算模式，成為一個純粹的集合。從範疇論來說就是先丟進一個&lt;em&gt;自由函子&lt;/em&gt;成為么半群，再用&lt;em&gt;遺忘函子&lt;/em&gt;打回集合的原形。&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://davidhu3141.github.io/%E4%BB%A3%E6%95%B8%E8%88%87%E7%B5%84%E5%90%88/2017/03/12/Free-Group.html</link>
        <guid isPermaLink="true">http://davidhu3141.github.io/%E4%BB%A3%E6%95%B8%E8%88%87%E7%B5%84%E5%90%88/2017/03/12/Free-Group.html</guid>
        
        
        <category>代數與組合</category>
        
      </item>
    
      <item>
        <title>群的定義與基礎概念</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;群的定義與基礎概念&lt;/h1&gt;

&lt;p&gt;群是當代代數學中研究的主題之一。&lt;/p&gt;

&lt;p&gt;這篇文章之中，只會擷取一些關於群(Group)的基礎意義與結構，目的是幫助初步認識群的人建構定義與概念，所以內容偏簡單。&lt;/p&gt;

&lt;p&gt;這只是其中一個認識群的方式。從幾何上的對稱性或 &lt;script type=&quot;math/tex&quot;&gt;\mathbb{S}_n&lt;/script&gt; （對稱群）來了解群也很不錯，或許會再寫。&lt;/p&gt;

&lt;!-- TOC --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#一群的觀念&quot;&gt;一、群的觀念&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#集合上的運算&quot;&gt;集合上的運算&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#運算的記號&quot;&gt;運算的記號&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#群的定義與意涵&quot;&gt;群的定義與意涵&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#舉例&quot;&gt;舉例&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#關於數學結構&quot;&gt;關於數學結構&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#二群同態&quot;&gt;二、群同態&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#定義&quot;&gt;定義&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#同態的意義&quot;&gt;同態的意義&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#舉例-1&quot;&gt;舉例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#三兩個群的直積&quot;&gt;三、兩個群的直積&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#定義-1&quot;&gt;定義&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;h2 id=&quot;section-1&quot;&gt;一、群的觀念&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;集合上的運算&lt;/h3&gt;

&lt;p&gt;數學家研究代數，必須要指定好在什麼集合上做什麼運算，例如在整數上做加法、在複數上做加法、在正實數上作乘法等，這樣才能界定討論的空間。而群就是一個這樣的「集合與運算」。&lt;/p&gt;

&lt;p&gt;群是一個集合 &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; 搭配一個二元運算 &lt;script type=&quot;math/tex&quot;&gt;+&lt;/script&gt; 所構成的代數結構，記為 &lt;script type=&quot;math/tex&quot;&gt;(G, +)&lt;/script&gt; 或 &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt;，這裡的 &lt;script type=&quot;math/tex&quot;&gt;+&lt;/script&gt; 是一個二元函數 &lt;script type=&quot;math/tex&quot;&gt;+:(G\times G)\rightarrow G&lt;/script&gt;，其接受兩個參數並回傳一個應變數，不過我們通常把 &lt;script type=&quot;math/tex&quot;&gt;+(1,2)=3&lt;/script&gt; 寫成 &lt;script type=&quot;math/tex&quot;&gt;1+2=3&lt;/script&gt;，以後也用這種寫法。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;運算的記號&lt;/h3&gt;

&lt;p&gt;這些運算的記號有一些變化，這裡先規範好。有時候我們研究的是加法，有時候是乘法，不同的群所使用的運算符號可能不同。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;整數的集合 &lt;script type=&quot;math/tex&quot;&gt;\mathbb{Z}&lt;/script&gt; 與其上的運算(&lt;script type=&quot;math/tex&quot;&gt;+&lt;/script&gt;)是一個群&lt;script type=&quot;math/tex&quot;&gt;(\mathbb{Z}, +)&lt;/script&gt;，方才我們說要把函數 &lt;script type=&quot;math/tex&quot;&gt;+(1, 2)=3&lt;/script&gt; 記為 &lt;script type=&quot;math/tex&quot;&gt;1+2=3&lt;/script&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;正實數 &lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}^+&lt;/script&gt; 與其上的乘法(&lt;script type=&quot;math/tex&quot;&gt;\cdot&lt;/script&gt;)也是一個群。除了把 &lt;script type=&quot;math/tex&quot;&gt;\cdot(2,3)=6&lt;/script&gt; 寫成 &lt;script type=&quot;math/tex&quot;&gt;2 \cdot 3 = 6&lt;/script&gt; ，如果算式含有未知數或字母，我們也會省略點號，寫成 &lt;script type=&quot;math/tex&quot;&gt;ab = c&lt;/script&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我們接下來遇到的運算，如果看起來明顯不像一般的加法，就通通叫做乘法，並使用這種類似相乘的符號。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;群的定義與意涵&lt;/h3&gt;

&lt;p&gt;數學家對群有一些規範，滿足這三個&lt;strong&gt;群公理&lt;/strong&gt;才能稱作群：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Axioms&lt;/th&gt;
      &lt;th&gt;#&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;結合律&lt;/td&gt;
      &lt;td&gt;對於所有 &lt;script type=&quot;math/tex&quot;&gt;a, b, c \in G&lt;/script&gt;，都有 &lt;script type=&quot;math/tex&quot;&gt;(ab)c=a(bc)&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;單位元素&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; 中有一個元素 &lt;script type=&quot;math/tex&quot;&gt;e&lt;/script&gt; 可以對所有 &lt;script type=&quot;math/tex&quot;&gt;a\in G&lt;/script&gt; 都滿足 &lt;script type=&quot;math/tex&quot;&gt;ae=ea=a&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;反元素&lt;/td&gt;
      &lt;td&gt;對於所有 &lt;script type=&quot;math/tex&quot;&gt;a\in G&lt;/script&gt; 都找得到唯一的 &lt;script type=&quot;math/tex&quot;&gt;b\in G&lt;/script&gt; 使得 &lt;script type=&quot;math/tex&quot;&gt;ab=e&lt;/script&gt;，我們稱 &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; 為 &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; 的反元素，記為 &lt;script type=&quot;math/tex&quot;&gt;b=a^{-1}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;我們會加上運算封閉性的前提，但有時候也可以事先寫明二元運算的值域為 &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; 本身，就等於規範了封閉性。&lt;/p&gt;

&lt;p&gt;這樣的規定有一點代數上的意義：它使方程式 &lt;script type=&quot;math/tex&quot;&gt;ax=b&lt;/script&gt; 確定能被解開，過程是這樣的：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;根據&lt;strong&gt;反元素&lt;/strong&gt;性質，&lt;script type=&quot;math/tex&quot;&gt;a^{-1}&lt;/script&gt;存在。&lt;/li&gt;
  &lt;li&gt;兩邊同乘以 &lt;script type=&quot;math/tex&quot;&gt;a^{-1}(ax)=a^{-1}b&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;根據&lt;strong&gt;結合律&lt;/strong&gt;，&lt;script type=&quot;math/tex&quot;&gt;(a^{-1}a)x=a^{-1}b&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;根據&lt;strong&gt;反元素&lt;/strong&gt;性質，&lt;script type=&quot;math/tex&quot;&gt;ex=a^{-1}b&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;根據&lt;strong&gt;單位元素&lt;/strong&gt;性質，&lt;script type=&quot;math/tex&quot;&gt;x=a^{-1}b&lt;/script&gt; ，這就是解。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果運算有交換律，則我們說它是&lt;strong&gt;阿貝爾群&lt;/strong&gt;：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Axioms&lt;/th&gt;
      &lt;th&gt;#&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;交換律&lt;/td&gt;
      &lt;td&gt;對於所有 &lt;script type=&quot;math/tex&quot;&gt;a, b \in G&lt;/script&gt;, 有 &lt;script type=&quot;math/tex&quot;&gt;ab=ba&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-5&quot;&gt;舉例&lt;/h3&gt;

&lt;p&gt;常見的例子有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;整數與加法 &lt;script type=&quot;math/tex&quot;&gt;(\mathbb Z,+)&lt;/script&gt;，也稱無限循環群。這是個阿貝爾群。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一般線性群 &lt;script type=&quot;math/tex&quot;&gt;\mathrm{GL}_n&lt;/script&gt;，用來代表所有 &lt;script type=&quot;math/tex&quot;&gt;n\times n&lt;/script&gt; 的可逆矩陣，而兩元素間的運算是矩陣乘法。由於矩陣的乘法沒有交換率，因此這不是阿貝爾群。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;有限循環群 &lt;script type=&quot;math/tex&quot;&gt;\mathbb{Z}_n&lt;/script&gt;：集合為 &lt;script type=&quot;math/tex&quot;&gt;\{0, 1, ..., n-1\}&lt;/script&gt; ，運算是相加並取 &lt;script type=&quot;math/tex&quot;&gt;\operatorname{mod} n&lt;/script&gt;（除以 &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; 後取餘數），而單位元素則是 &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;，可以檢驗這是阿貝爾群。一天 24 小時的循環可以視為 &lt;script type=&quot;math/tex&quot;&gt;\mathbb{Z}_{24}&lt;/script&gt;，每天 23 時再過一小時就回到 0 時。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt; &lt;script type=&quot;math/tex&quot;&gt;\mathbb{Z}\otimes \mathbb{Z}&lt;/script&gt;：平面上的格子點座標，運算是座標的加法 &lt;script type=&quot;math/tex&quot;&gt;(a,b)+(c,d)=(a+c,b+d)&lt;/script&gt;。 &lt;script type=&quot;math/tex&quot;&gt;\otimes &lt;/script&gt; 是一個建構新的群的方法，類似積集合。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;對稱群 &lt;script type=&quot;math/tex&quot;&gt;S_n&lt;/script&gt;：將 n 個排好的物品重新排列的方法，可以構成一個群。兩個排列方法 &lt;script type=&quot;math/tex&quot;&gt;a, b&lt;/script&gt; 的相加就是先用 &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; 方法排列，再把排好的物品繼續用 &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; 方法排列。而單位元素就是不重新排列。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下這些例子&lt;strong&gt;不是&lt;/strong&gt;群&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;實數上的乘法 &lt;script type=&quot;math/tex&quot;&gt;(\mathbb{R},\cdot)&lt;/script&gt; 不是群，因為 &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; 沒有反元素。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;所有二階方陣 &lt;script type=&quot;math/tex&quot;&gt;M_{2\times 2}&lt;/script&gt; 上的矩陣乘法不是群，因為其中的不可逆方陣沒有反元素。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-6&quot;&gt;關於數學結構&lt;/h3&gt;

&lt;p&gt;像這樣集合搭配某個關係的數學結構隨處可見。除了群以外，&lt;script type=&quot;math/tex&quot;&gt;(\mathbb{N}, \leq)&lt;/script&gt; 是整數上的順序結構、&lt;script type=&quot;math/tex&quot;&gt;(\mathbb{R}^3, +, \times)&lt;/script&gt; 是一個向量空間、&lt;script type=&quot;math/tex&quot;&gt;(\mathbb{R}, |\cdot |)&lt;/script&gt; 是實數與其上的距離、&lt;script type=&quot;math/tex&quot;&gt;G(e, v)&lt;/script&gt; 是一個圖，因此不需要對群的記號感到太陌生。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;二、群同態&lt;/h2&gt;

&lt;p&gt;群是集合，兩個集合之間會有函數，而兩個群之間也有。同態 (homomorphism) 是兩個群之間「有群的意義的函數」（從範疇論來說就是態射）。研究兩個群之間的關係時，我們鮮少討論同態之外的函數。&lt;/p&gt;

&lt;p&gt;來看群同態的定義：&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;定義&lt;/h3&gt;

&lt;p&gt;令 &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; 與 &lt;script type=&quot;math/tex&quot;&gt;H&lt;/script&gt; 是兩個群，&lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; 是一個 &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; 到 &lt;script type=&quot;math/tex&quot;&gt;H&lt;/script&gt; 的函數 &lt;script type=&quot;math/tex&quot;&gt;f:G \rightarrow H&lt;/script&gt;。 如果 &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; 是個群同態，代表它對於所有 &lt;script type=&quot;math/tex&quot;&gt;a, b \in G&lt;/script&gt; 滿足下列的條件：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt; &lt;script type=&quot;math/tex&quot;&gt;f(a)f(b)=f(ab)&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;用加法的記號來寫就是&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt; &lt;script type=&quot;math/tex&quot;&gt;f(a)+f(b)=f(a+b)&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;單從算式來看，可以說成「先代入 &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; 再乘（加），等同於先相乘（加）再代入 &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;」，或是「&lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; 中的相乘（加）可以被拆開」。&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;同態的意義&lt;/h3&gt;

&lt;p&gt;一個同態 &lt;script type=&quot;math/tex&quot;&gt;f:G\to H&lt;/script&gt; 的定義可以改寫為：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt; &lt;script type=&quot;math/tex&quot;&gt;ab=c \implies f(a)f(b)=f(c)&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以我們有更精確的理解：群同態是一個保持運算行為的函數，如果 &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; 中有 &lt;script type=&quot;math/tex&quot;&gt;ab=c&lt;/script&gt;，則 &lt;script type=&quot;math/tex&quot;&gt;H&lt;/script&gt; 中有 &lt;script type=&quot;math/tex&quot;&gt;f(a)f(b)=f(c)&lt;/script&gt; 。&lt;/p&gt;

&lt;p&gt;這就是群同態值得討論的原因。如果一個函數在映射時不保持結構，那麼它只是把 &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; 與 &lt;script type=&quot;math/tex&quot;&gt;H&lt;/script&gt; 當作普通的集合（而不是群）來對待罷了。&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;舉例&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;把平面座標上的格子點投影到 x 軸上，則這個投影函數 &lt;script type=&quot;math/tex; mode=display&quot;&gt;\operatorname{Proj}_x:(a,b)\mapsto a&lt;/script&gt; 是一個同態，我們可以檢驗下面的例子： &lt;script type=&quot;math/tex; mode=display&quot;&gt;\operatorname{Proj}_x(2, 1) + \operatorname{Proj}_x(3, 5) = 2+3 = \operatorname{Proj}_x((2, 1)+(3, 5))&lt;/script&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt; &lt;script type=&quot;math/tex&quot;&gt;f:x\mapsto (x \operatorname{mod} n)&lt;/script&gt; 把所有 &lt;script type=&quot;math/tex&quot;&gt;(\mathbb{Z}, +)&lt;/script&gt; 中的整數取 &lt;script type=&quot;math/tex&quot;&gt;\operatorname{mod} n&lt;/script&gt; 以對應到循環群 &lt;script type=&quot;math/tex&quot;&gt;\mathbb{Z}_n&lt;/script&gt; 。根據同餘關係這樣的對應也是同態。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-11&quot;&gt;三、兩個群的直積&lt;/h2&gt;

&lt;p&gt;直積是構造新的群的方法，類似用兩個集合相乘來製造積集合。&lt;/p&gt;

&lt;h3 id=&quot;section-12&quot;&gt;定義&lt;/h3&gt;

&lt;p&gt;兩個群 &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; , &lt;script type=&quot;math/tex&quot;&gt;H&lt;/script&gt; 的直積 &lt;script type=&quot;math/tex&quot;&gt;G\otimes H&lt;/script&gt; 是一個群，其中的元素是集合 &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; 與集合 &lt;script type=&quot;math/tex&quot;&gt;H&lt;/script&gt; 的積集合： &lt;script type=&quot;math/tex; mode=display&quot;&gt;(g_i, h_j) \in (G\times H)&lt;/script&gt;，而兩個序對之間的運算則定義為分量個別運算：&lt;script type=&quot;math/tex; mode=display&quot;&gt;(g_1, h_1) (g_2, h_2) = (g_1 g_2, h_1 h_2)&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;例如之前提到平面上的格子點 &lt;script type=&quot;math/tex&quot;&gt;\mathbb Z \otimes \mathbb Z&lt;/script&gt; 就是兩個整數群 &lt;script type=&quot;math/tex&quot;&gt;\mathbb Z&lt;/script&gt; 的直積。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;直積有更一般的定義，只是為了採取簡單的解說方式而用了這個。這個定義只適用&lt;strong&gt;有限個&lt;/strong&gt;群相乘。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在只有&lt;strong&gt;有限個&lt;/strong&gt;個群相乘時，直積與「直和」是一樣的，箇中差異現在提或許有點早。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;至於商群是很重要的東西，它就像是群論版本的商集（等價類）一樣。會再開一篇文章討論。&lt;/p&gt;

</description>
        <pubDate>Wed, 01 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://davidhu3141.github.io/%E4%BB%A3%E6%95%B8%E8%88%87%E7%B5%84%E5%90%88/2017/03/01/%E7%BE%A4%E7%9A%84%E5%9F%BA%E7%A4%8E%E5%AE%9A%E7%BE%A9.html</link>
        <guid isPermaLink="true">http://davidhu3141.github.io/%E4%BB%A3%E6%95%B8%E8%88%87%E7%B5%84%E5%90%88/2017/03/01/%E7%BE%A4%E7%9A%84%E5%9F%BA%E7%A4%8E%E5%AE%9A%E7%BE%A9.html</guid>
        
        
        <category>代數與組合</category>
        
      </item>
    
      <item>
        <title>生成函數 (II) -- 關於 RegExp 的妙用</title>
        <description>&lt;h1 id=&quot;ii-----regexp-&quot;&gt;生成函數 (II) – 關於 RegExp 的妙用&lt;/h1&gt;

&lt;p&gt;之前說要讀 &lt;em&gt;Analytic Combinatorics&lt;/em&gt; 然後寫心得，後來卻跳槽去看代數拓撲，斷尾了。作為一個半途而廢的勞山道士，還是學到了一些粗淺卻酷炫的穿牆術，在此作一些心得分享。內容主要是&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;免思考，機械化寫出 regexp 的生成函數，進而回答「regexp 所表示的語言中，長度為 &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; 的字串有幾個？」&lt;/li&gt;
  &lt;li&gt;初步判斷生成函數係數的漸進複雜度&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;這兩個手法看起來很酷炫，又在本書 Part I 與 Part II 的第一個章目，的確像是《聊齋誌異》中《勞山道士》的「穿牆術」，很有淺嘗即止的味道。&lt;/p&gt;

&lt;!-- TOC --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#regexp-的生成函數&quot;&gt;RegExp 的生成函數&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#形式語言的生成函數&quot;&gt;形式語言的生成函數&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#正規語言的建構&quot;&gt;正規語言的建構&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#聯集&quot;&gt;聯集&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#串接&quot;&gt;串接&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#sequence&quot;&gt;Sequence&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#生成函數的建構&quot;&gt;生成函數的建構&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#聯集與相加&quot;&gt;聯集與相加&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#串接與相乘&quot;&gt;串接與相乘&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#sequence-1&quot;&gt;Sequence&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#舉例&quot;&gt;舉例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#初步判斷生成函數係數的複雜度&quot;&gt;初步判斷生成函數係數的複雜度&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#手法&quot;&gt;手法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#舉例-1&quot;&gt;舉例&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#費氏數列&quot;&gt;費氏數列&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#形式語言的例子&quot;&gt;形式語言的例子&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#關於細節&quot;&gt;關於細節&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;h2 id=&quot;regexp-&quot;&gt;RegExp 的生成函數&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;形式語言的生成函數&lt;/h3&gt;

&lt;p&gt;寫出一個正規表達式（RegExp），就代表一個正規語言 &lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt;。如果 &lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt; 中長度為 0 的字串有 &lt;script type=&quot;math/tex&quot;&gt;a_0&lt;/script&gt; 個、長度為 1 的有 &lt;script type=&quot;math/tex&quot;&gt;a_1&lt;/script&gt; 個、長度為 n 的有 &lt;script type=&quot;math/tex&quot;&gt;a_n&lt;/script&gt; 個，則關於 &lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt; 的多項式&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f_{L}(z)=a_0 + a_1z+a_2z^2+...+a_nz^n+...&lt;/script&gt;

&lt;p&gt;稱為正規語言 &lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt; 的生成函數，其第 n 項係數的值是該語言中長度為 n 的字串的數量。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;正規語言的建構&lt;/h3&gt;

&lt;p&gt;雖然在程式語言中，正規表達式有許多花花綠綠的寫法，但是他們都可以由以下三種 regular constructions 來延伸，這裡先明確的寫出來：&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;聯集&lt;/h4&gt;

&lt;p&gt;聯集是「或」的概念，用直槓 &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; 來表達。正規表達式 &lt;code class=&quot;highlighter-rouge&quot;&gt;(a|bb)&lt;/code&gt; 可以 match 字串 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;bb&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;串接&lt;/h4&gt;

&lt;p&gt;串接是將兩個字串接在一起，寫法是直接接起來。正規表達式 &lt;code class=&quot;highlighter-rouge&quot;&gt;(a|bb)c&lt;/code&gt; 代表「&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;bb&lt;/code&gt; 後面要接一個 &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;」 才 match。&lt;/p&gt;

&lt;h4 id=&quot;sequence&quot;&gt;Sequence&lt;/h4&gt;

&lt;p&gt;Sequence 是指某個字串重複出現，出現次數可以從零次到任意多次，用星號 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 來表達。正規表達式 &lt;code class=&quot;highlighter-rouge&quot;&gt;(a|bb)*&lt;/code&gt; 可以 match 空字串、&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;aa&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;abbabb&lt;/code&gt; 等。&lt;/p&gt;

&lt;p&gt;以上三個就是基本的 regular construction。能夠只以 regular construction 建構的語言稱為 regular language。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;生成函數的建構&lt;/h3&gt;

&lt;p&gt;三種 regular construction 都對應到一種生成函數的運算：&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; 號對應函數相加的動作，串接是相乘，&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 則是把函數 &lt;script type=&quot;math/tex&quot;&gt;f(z)&lt;/script&gt; 寫成 &lt;script type=&quot;math/tex&quot;&gt;\frac{1}{1-f(z)}&lt;/script&gt;。以下一一詳細解釋：&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;聯集與相加&lt;/h4&gt;

&lt;p&gt;現在有兩個正規語言&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L_1=\{a\}，L_2=\{bb\}&lt;/script&gt;

&lt;p&gt;，其生成函數分別為&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f_{L_1}(z)=z，f_{L_2}(z)=z^2&lt;/script&gt;

&lt;p&gt;，則他們聯集的新語言 &lt;script type=&quot;math/tex&quot;&gt;L_3= \{a, bb\}=&lt;/script&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;(a|bb)&lt;/code&gt; ，含有長度為一、二的字串各一個，故生成函數為&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f_{L_3}(z)=z+z^2&lt;/script&gt;

&lt;p&gt;恰好是 &lt;script type=&quot;math/tex&quot;&gt;f_{L_1}(z)，f_{L_2}(z)&lt;/script&gt; 的和。我們觀察到「正規語言的聯集，對應到生成函數的相加」。&lt;/p&gt;

&lt;p&gt;這裡有個但書：語言 &lt;script type=&quot;math/tex&quot;&gt;L_1&lt;/script&gt;、&lt;script type=&quot;math/tex&quot;&gt;L_2&lt;/script&gt; 的聯集能表示成生成函數相加，前提是他們互斥。上面的例子如果 &lt;script type=&quot;math/tex&quot;&gt;L_2 = &lt;/script&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(a|bb)&lt;/code&gt; ，生成函數的相加就會出錯。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Correspondence 1&lt;/strong&gt;：正規語言的聯集，其對應的生成函數相加，但被聯集的兩個語言需互斥。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;section-6&quot;&gt;串接與相乘&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Correspondence 2&lt;/strong&gt;：正規語言的串接，其對應的生成函數相乘。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;舉例來說：&lt;code class=&quot;highlighter-rouge&quot;&gt;(a|bb)&lt;/code&gt; 的生成函數是 &lt;script type=&quot;math/tex&quot;&gt;z+z^2&lt;/script&gt;，而 &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; 的生成函數是 &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt;，因此正規語言 &lt;code class=&quot;highlighter-rouge&quot;&gt;(a|bb)c&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;=\{ac, bbc\}&lt;/script&gt; 的生成函數是&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt; z^2+z^3 = (z+z^2)\cdot z&lt;/script&gt;

&lt;p&gt;&lt;em&gt;Correspondence 2&lt;/em&gt; 果然所言不假。&lt;/p&gt;

&lt;h4 id=&quot;sequence-1&quot;&gt;Sequence&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Correspondence 3&lt;/strong&gt;：正規語言 &lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt; 的生成函數是 &lt;script type=&quot;math/tex&quot;&gt;f_L(z)&lt;/script&gt;，則 &lt;script type=&quot;math/tex&quot;&gt;L^*&lt;/script&gt; 的生成函數為 &lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{1}{1-f(z)}&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;舉例來說：如果正規語言 &lt;script type=&quot;math/tex&quot;&gt;L=&lt;/script&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;(a|bb)&lt;/code&gt;，則 &lt;script type=&quot;math/tex&quot;&gt;L^*=&lt;/script&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;(a|bb)*&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;=\{\epsilon, a, bb, aa, abb, bba, bbbb, ... \}&lt;/script&gt;。我們把這看成&lt;/p&gt;

&lt;p&gt; &lt;script type=&quot;math/tex&quot;&gt;L^*=&lt;/script&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;+&lt;code class=&quot;highlighter-rouge&quot;&gt;(a|bb)&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;(a|bb)(a|bb)&lt;/code&gt;+&lt;code class=&quot;highlighter-rouge&quot;&gt;(a|bb)(a|bb)(a|bb)&lt;/code&gt;+…&lt;/p&gt;

&lt;p&gt;於是生成函數是&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f_{L^*}(z)=1+(z+z^2)+(z+z^2)^2+(z+z^2)^3+...&lt;/script&gt;

&lt;p&gt;，用無窮等比級數公式化簡得到&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f_{L^*}(z)=\frac{1}{1-(z+z^2)}&lt;/script&gt;

&lt;p&gt;與 &lt;em&gt;Correspondence 3&lt;/em&gt; 所說的如出一轍。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;舉例&lt;/h3&gt;

&lt;p&gt;隨便舉一個有點複雜的 RegExp 來試試：&lt;code class=&quot;highlighter-rouge&quot;&gt;(0|(1(01*0)*1))*&lt;/code&gt; 所表示的語言中，長度為 4 的字串有幾個？&lt;/p&gt;

&lt;p&gt;我們先寫出其生成函數。一個步驟一個步驟做，從裡面開始：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(01*0)&lt;/code&gt; 對應到 &lt;script type=&quot;math/tex&quot;&gt;z\cdot \frac{1}{1-z} \cdot z&lt;/script&gt;，化簡為 &lt;script type=&quot;math/tex&quot;&gt;\frac{z^2}{1-z}&lt;/script&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(01*0)*&lt;/code&gt; 要再寫一次 sequence construction，變成 &lt;script type=&quot;math/tex&quot;&gt;\frac{1}{1-(\frac{z^2}{1-z})}&lt;/script&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(1(01*0)*1)&lt;/code&gt; 變成 &lt;script type=&quot;math/tex&quot;&gt;z\cdot \frac{1}{1-(\frac{z^2}{1-z})} \cdot z = \frac{z^2}{1-(\frac{z^2}{1-z})}&lt;/script&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(0|(1(01*0)*1))&lt;/code&gt; 變成 &lt;script type=&quot;math/tex&quot;&gt;z + \frac{z^2}{1-(\frac{z^2}{1-z})}&lt;/script&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(0|(1(01*0)*1))*&lt;/code&gt; 變成 &lt;script type=&quot;math/tex&quot;&gt;\frac{1}{1-(z + \frac{z^2}{1-(\frac{z^2}{1-z})})}&lt;/script&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一個口令一個動作，就這樣寫完了。不管怎麼寫，它總是可以化簡成兩個多項式相除（有理式），畢竟建構過程中不會有開根號什麼的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Corollary&lt;/strong&gt;：Regular Language 的 Generating Function 總是有理式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;方才這個生成函數可以化簡為&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;-\frac{z^2+z-1}{(z-1)(z+1)(2z-1)}&lt;/script&gt;

&lt;p&gt;將其寫成泰勒展開式（過程省略），可以得到 &lt;script type=&quot;math/tex&quot;&gt;1+z+2z^2+3z^3+6x^4+...&lt;/script&gt; ，所以答案也就是 4 次項係數， 6。&lt;/p&gt;

&lt;p&gt;另外&lt;code class=&quot;highlighter-rouge&quot;&gt;(0|(1(01*0)*1))*&lt;/code&gt;是從維基百科找的 regexp，其意義為「用二進位表示的三的倍數」。用 4 個 digit 能表示的三的倍數有 0000, 0011, … , 1111，正好有 [16/3]+1 = 6 個，果然計算無誤。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;初步判斷生成函數係數的複雜度&lt;/h2&gt;

&lt;p&gt;一個數列 &lt;script type=&quot;math/tex&quot;&gt;\{a_n\}&lt;/script&gt; 有漸進複雜度，而生成函數的係數是個數列，所以也可以計算係數複雜度，這部分是 &lt;em&gt;Analytic Combinatorics&lt;/em&gt; 的重點。我在這裡寫下一個粗略的手法，說明如何判斷「生成函數係數複雜度的指數項」，但不證明。&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;手法&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;生成函數 &lt;script type=&quot;math/tex&quot;&gt;f(z)=a_0+a_1z+a_2z^2+... &lt;/script&gt; 約分化簡後，其在複數平面上的不連續點之中，距離原點最近的設為 &lt;script type=&quot;math/tex&quot;&gt;\hat{z}&lt;/script&gt;，則其數列 &lt;script type=&quot;math/tex&quot;&gt;\{a_n\}&lt;/script&gt; 複雜度的指數項為 &lt;script type=&quot;math/tex&quot;&gt;\operatorname{\Theta}(\frac{1}{|\hat{z}|^{n}})&lt;/script&gt;.&lt;/p&gt;

  &lt;p&gt;但有個前提是：原點不能是生成函數的不連續點。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;這裡說不連續點其實不太好，應該要說奇點，因為這有複分析的意義&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;約分化簡是要把類似 &lt;script type=&quot;math/tex&quot;&gt;\frac{(z-1)^2}{z-1}&lt;/script&gt; 的式子直接寫成 &lt;script type=&quot;math/tex&quot;&gt;z-1&lt;/script&gt;。&lt;/p&gt;

&lt;p&gt;所謂「複雜度指數項為 &lt;script type=&quot;math/tex&quot;&gt;\operatorname{\Theta}(K^n)&lt;/script&gt;」指的是複雜度為 &lt;script type=&quot;math/tex&quot;&gt;\operatorname{\Theta}(K^n\cdot f(n))&lt;/script&gt;，其中 &lt;script type=&quot;math/tex&quot;&gt;f(n)&lt;/script&gt; 比指數項還小，比方說 &lt;script type=&quot;math/tex&quot;&gt;3^n\cdot n\operatorname{log}n&lt;/script&gt; ，其指數項就是 &lt;script type=&quot;math/tex&quot;&gt;3^n&lt;/script&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;舉例&lt;/h3&gt;

&lt;h4 id=&quot;section-11&quot;&gt;費氏數列&lt;/h4&gt;

&lt;p&gt;費氏數列的生成函數為 &lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{x}{1-x-x^2}&lt;/script&gt; ，其分母在 &lt;script type=&quot;math/tex&quot;&gt;z=\frac{\sqrt{5}\pm 1}{2}&lt;/script&gt; 為零，所以其不連續點中離原點最近的是 &lt;script type=&quot;math/tex&quot;&gt;\hat{z}=\frac{\sqrt{5}- 1}{2}&lt;/script&gt;，其絕對值倒數為 &lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{1}{|\hat{z}|}=\frac{\sqrt{5}+1}{2}&lt;/script&gt;，所以費氏數列複雜度的指數項為 &lt;script type=&quot;math/tex; mode=display&quot;&gt;\operatorname{\Theta}((\frac{\sqrt{5}+1}{2})^n)&lt;/script&gt;。對照費氏數列的通式&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F_n = \frac{1}{\sqrt5}(\frac{\sqrt{5}+1}{2})^n+\frac{1}{\sqrt5}(\frac{\sqrt{5}-1}{2})^n = \operatorname{\Theta}((\frac{\sqrt{5}+1}{2})^n)&lt;/script&gt;

&lt;p&gt;可發現確是如此。&lt;/p&gt;

&lt;h4 id=&quot;section-12&quot;&gt;形式語言的例子&lt;/h4&gt;

&lt;p&gt;方才我們有個判斷 3 的倍數的正規表達式&lt;code class=&quot;highlighter-rouge&quot;&gt;(0|(1(01*0)*1))*&lt;/code&gt;，其生成函數為&lt;script type=&quot;math/tex; mode=display&quot;&gt;-\frac{z^2+z-1}{(z-1)(z+1)(2z-1)}&lt;/script&gt;。其分母在 1、-1、0.5 有根，其中 0.5 離原點最近，其倒數為 2，所以複雜度的指數項為 &lt;script type=&quot;math/tex&quot;&gt;\operatorname{\Theta}(2^n)&lt;/script&gt;。&lt;/p&gt;

&lt;p&gt;對照起來，能用 &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; 個 digit 表示的三的倍數有 &lt;script type=&quot;math/tex&quot;&gt;[2^n/3]+1&lt;/script&gt; 個，的確是 &lt;script type=&quot;math/tex&quot;&gt;\operatorname{\Theta}(2^n)&lt;/script&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;關於細節&lt;/h3&gt;

&lt;p&gt;關於不連續點有一些細節，比方說方才我們常在找分母的實根，當作不連續點。但是這個多項式是可以代入複數進去的，所以如果有虛根的話，虛根到原點的距離也要考慮進去。&lt;/p&gt;

&lt;p&gt;之所以要把分式先約分，是因為類似 &lt;script type=&quot;math/tex&quot;&gt;\frac{(z-1)^2}{z-1}&lt;/script&gt; 的式子雖然不連續，但是從複分析的角度，其不連續點可以輕易的被「填補」（解析延拓）。&lt;/p&gt;

&lt;p&gt;很多式子雖然都是有理式的形式，可以只看分母的根，但也有些不是。比方說出現根號也會造成不連續點。&lt;/p&gt;

&lt;p&gt;分母在原點有根時，使用這手法&lt;strong&gt;可能會算錯&lt;/strong&gt;。&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://davidhu3141.github.io/%E4%BB%A3%E6%95%B8%E8%88%87%E7%B5%84%E5%90%88/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8/2016/12/02/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B8-(II)-%E9%97%9C%E6%96%BC-RegExp-%E7%9A%84%E5%A6%99%E7%94%A8.html</link>
        <guid isPermaLink="true">http://davidhu3141.github.io/%E4%BB%A3%E6%95%B8%E8%88%87%E7%B5%84%E5%90%88/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8/2016/12/02/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B8-(II)-%E9%97%9C%E6%96%BC-RegExp-%E7%9A%84%E5%A6%99%E7%94%A8.html</guid>
        
        
        <category>代數與組合</category>
        
        <category>計算機科學</category>
        
      </item>
    
      <item>
        <title>歐拉公式與三角函數的指數形式</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;歐拉公式與三角函數的指數形式&lt;/h1&gt;

&lt;p&gt;歐拉公式 &lt;script type=&quot;math/tex&quot;&gt;e^{i\theta}=\operatorname{cos}\theta+i\operatorname{sin}\theta&lt;/script&gt; 讓我們可以定義複數的指數，然後作很多事，比方說&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;將三角函數寫成指數形式，像雙曲函數 &lt;script type=&quot;math/tex&quot;&gt;\sinh=(e^x-e^{-x})/2&lt;/script&gt;、 &lt;script type=&quot;math/tex&quot;&gt;\cosh=(e^x+e^{-x})/2&lt;/script&gt; 一樣。&lt;/li&gt;
  &lt;li&gt;重寫複數的極式，並證明棣美弗定理&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;證明代數基本定理（此不討論）&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在這之前應該要先證明歐拉公式。證明歐拉公式需要用到微積分中的泰勒展開式（Taylor formula）。&lt;/p&gt;

&lt;!-- TOC --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#泰勒展開式&quot;&gt;泰勒展開式&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#三次式的係數&quot;&gt;三次式的係數&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#物理意義&quot;&gt;物理意義&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#無窮項的泰勒展開式&quot;&gt;無窮項的泰勒展開式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#無窮多項的盲點&quot;&gt;無窮多項的盲點&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#歐拉公式&quot;&gt;歐拉公式&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#某數的-i-次方&quot;&gt;某數的 &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; 次方&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#展開三角函數&quot;&gt;展開三角函數&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#證明歐拉公式&quot;&gt;證明歐拉公式&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#將三角函數寫成指數形式&quot;&gt;將三角函數寫成指數形式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#證明棣美弗定理&quot;&gt;證明棣美弗定理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;h3 id=&quot;section-1&quot;&gt;泰勒展開式&lt;/h3&gt;

&lt;p&gt;先看一個簡單的例子：&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;三次式的係數&lt;/h4&gt;

&lt;p&gt;對於一個未知的三次式 &lt;script type=&quot;math/tex&quot;&gt;f(x) = ax^3+bx^2+cx+d&lt;/script&gt;，如果我們知道 &lt;script type=&quot;math/tex&quot;&gt;f(0)&lt;/script&gt;、&lt;script type=&quot;math/tex&quot;&gt;f&#39;(0)&lt;/script&gt;、&lt;script type=&quot;math/tex&quot;&gt;f&#39;&#39;(0)&lt;/script&gt;、&lt;script type=&quot;math/tex&quot;&gt;f&#39;&#39;&#39;(0)&lt;/script&gt;，那麼我們就可以知道 &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt; 的各項係數，方法如下：&lt;/p&gt;

&lt;p&gt;首先，&lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt; 是常數項，所以 &lt;script type=&quot;math/tex&quot;&gt;d=f(0)&lt;/script&gt;。&lt;/p&gt;

&lt;p&gt;其次，&lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt; 是 &lt;script type=&quot;math/tex&quot;&gt;f&#39;(x)=3ax^2+2bx+1c&lt;/script&gt; 的常數項，所以 &lt;script type=&quot;math/tex&quot;&gt;c=f&#39;(0)&lt;/script&gt;。&lt;/p&gt;

&lt;p&gt;再來，&lt;script type=&quot;math/tex&quot;&gt;2b&lt;/script&gt; 是 &lt;script type=&quot;math/tex&quot;&gt;f&#39;&#39;(x)=3\cdot 2ax+2\cdot 1b&lt;/script&gt; 的常數項，所以 &lt;script type=&quot;math/tex&quot;&gt;b=\frac{1}{2!}f&#39;&#39;(0)&lt;/script&gt;。&lt;/p&gt;

&lt;p&gt;最後，&lt;script type=&quot;math/tex&quot;&gt;6a&lt;/script&gt; 是 &lt;script type=&quot;math/tex&quot;&gt;f&#39;&#39;&#39;(x) = 3\cdot 2\cdot 1\cdot a&lt;/script&gt; 的常數項，所以 &lt;script type=&quot;math/tex&quot;&gt;a=\frac{1}{3!}f&#39;&#39;&#39;(0)&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;因此多項式 &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt; 可以表示為 &lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x)=f(0)+\frac{f&#39;(0)}{1!}x+\frac{f&#39;&#39;(0)}{2!}x^2+\frac{f&#39;&#39;&#39;(0)}{3!}x^3.&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;以此為發想，一個 &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; 次多項式總是可以重新表示成&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt; f(x)=\sum_{k=0}^{n} \frac{f^{(k)}(0)}{k!} x^k &lt;/script&gt;

&lt;p&gt;，其中 &lt;script type=&quot;math/tex&quot;&gt;f^{(k)}(0)&lt;/script&gt; 代表 &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; 在原點的第 &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; 階導數。&lt;/p&gt;

&lt;p&gt;這就是多項式在原點的泰勒公式。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;物理意義&lt;/h4&gt;

&lt;p&gt;這裡有一點物理意義：如果一個系統是以多項式的模式在演變，比方說氣溫，那麼只要測量現在的氣溫、現在的氣溫變化率、變化率的變化率 …，就可以知道未來每一刻的溫度了。&lt;/p&gt;

&lt;p&gt;但是氣溫不可能以多項式演變，因為高次多項式增長的速度非常快，所以這種預測並不能預測很久以後的氣溫。&lt;/p&gt;

&lt;p&gt;如果是測量物體運動的話，&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x(t) = x(0) + \frac{x&#39;(0)}{1!} t + \frac{x&#39;&#39;(0)}{2!} t^2 + \cdots&lt;/script&gt;

&lt;p&gt;前三項就是等加速度公式（也就是說，&lt;script type=&quot;math/tex&quot;&gt;a(t) = a_{\textit{(const)}},\ x&#39;&#39;&#39;(t)=0&lt;/script&gt; 的情況）&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt; x(t)-x(0) = \Delta x = \frac{v(0)}{1!}t+\frac{a}{2!}t^2&lt;/script&gt;

&lt;h4 id=&quot;section-4&quot;&gt;無窮項的泰勒展開式&lt;/h4&gt;

&lt;p&gt;泰勒展開式可以用來展開非多項式的函數，想當然耳，其展開後該要有無窮多項，否則就是多項式了。「無窮項的多項式」不能稱做多項式，應該稱做冪級數。&lt;/p&gt;

&lt;p&gt;冪級數指的是具有下列形式的級數：
&lt;script type=&quot;math/tex; mode=display&quot;&gt; p(x) = \sum _{k=0} ^{\infty} p_kx^k &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;現在把泰勒展開式的公式改寫成無窮項的冪級數：
&lt;script type=&quot;math/tex; mode=display&quot;&gt; f_{\mathrm{taylor}}(x) = \sum_{k=0}^{\infty} \frac{f^{(k)}(0)}{k!} x^k &lt;/script&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;無窮多項的盲點&lt;/h4&gt;

&lt;p&gt;並不是所有函數的泰勒展開式都和原本一模一樣，所以上面的式子才會說它是個新函數 &lt;script type=&quot;math/tex&quot;&gt;f_{\mathrm{taylor}}(x)&lt;/script&gt;。&lt;/p&gt;

&lt;p&gt;有時候 &lt;script type=&quot;math/tex&quot;&gt;f_{\mathrm{taylor}}(x) \neq f(x)&lt;/script&gt; ，體認到這點是非常重要的，現在舉個例子來看：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;函數 &lt;script type=&quot;math/tex&quot;&gt;f(x)=\frac{1}{1-x}&lt;/script&gt; 的結果是 &lt;script type=&quot;math/tex; mode=display&quot;&gt; f_{\mathrm{taylor}}(x) = 1+x+x^2+x^3+... = \sum_{k=0}^{\infty} x^k&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;要實際展開來驗證也可以，不過當成等比級數來看的話這結果是顯而易見的。&lt;/p&gt;

&lt;p&gt;無窮等比級數的公比 &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; 必須滿足範圍 &lt;script type=&quot;math/tex&quot;&gt;-1&amp;lt;x&amp;lt;1&lt;/script&gt;，所以 &lt;script type=&quot;math/tex&quot;&gt;f_{\mathrm{taylor}}&lt;/script&gt; 在這範圍外是沒有值的。但是 &lt;script type=&quot;math/tex&quot;&gt;f(x)=\frac{1}{1-x}&lt;/script&gt; 只在 &lt;script type=&quot;math/tex&quot;&gt;x=1&lt;/script&gt; 的地方沒有值，所以這是兩個不一樣的函數。&lt;/p&gt;

&lt;p&gt;應該試著去想 &lt;script type=&quot;math/tex&quot;&gt;f_{\mathrm{taylor}}(x) &lt;/script&gt; 和 &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt; 的圖形差在哪裡。（前者只是後者的一部份）&lt;/p&gt;

&lt;p&gt;下圖為利用 &lt;script type=&quot;math/tex&quot;&gt;1\sim6&lt;/script&gt; 次多項式（藍色）逼近 &lt;script type=&quot;math/tex&quot;&gt;\frac1{1-x}&lt;/script&gt; （紅色）的圖形：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/83maw3U.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;歐拉公式&lt;/h3&gt;

&lt;p&gt;被稱做歐拉公式的式子太多了，這裡指的是&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;e^{ix}=\operatorname{cos}x+i\operatorname{sin}x&lt;/script&gt;

&lt;p&gt;某數的 &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; 次方的概念就是從這裡定義的。&lt;/p&gt;

&lt;h4 id=&quot;script-typemathtexiscript-&quot;&gt;某數的 &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; 次方&lt;/h4&gt;

&lt;p&gt;來計算 &lt;script type=&quot;math/tex&quot;&gt;e^x&lt;/script&gt; 的泰勒展開式。為了符號方便，定義函數 &lt;script type=&quot;math/tex&quot;&gt;\operatorname{exp}x=e^x&lt;/script&gt;。&lt;/p&gt;

&lt;p&gt;根據泰勒展開式：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\operatorname{exp}x=\operatorname{exp}0+\frac{\operatorname{exp}&#39;0}{1!}x + \frac{\operatorname{exp}&#39;&#39;0}{2!}x^2+...&lt;/script&gt;

&lt;p&gt;由於 &lt;script type=&quot;math/tex&quot;&gt;\operatorname{exp}x&lt;/script&gt; 是個特殊函數，其 &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; 階導數都是 &lt;script type=&quot;math/tex&quot;&gt;\operatorname{exp}x&lt;/script&gt; 本身，所以 &lt;script type=&quot;math/tex&quot;&gt;\operatorname{exp}&#39; &#39; 0 = \operatorname{exp}&#39; 0 = \operatorname{exp} 0 = 1 &lt;/script&gt; ，展開式簡化為&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\operatorname{exp}x=1+\frac{1}{1!}x + \frac{1}{2!}x^2+...&lt;/script&gt;

&lt;p&gt;注意到這樣 &lt;script type=&quot;math/tex&quot;&gt;\operatorname{exp}x&lt;/script&gt; 就可以代虛數進去了。代純虛數 &lt;script type=&quot;math/tex&quot;&gt;ix&lt;/script&gt; 進去看看：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\operatorname{exp}ix=1+\frac{1}{1!}ix + \frac{1}{2!}i^2x^2+\frac{1}{3!}i^3x^3+\frac{1}{4!}i^4x^4+\frac{1}{5!}i^5x^5+...&lt;/script&gt;

&lt;p&gt;利用 &lt;script type=&quot;math/tex&quot;&gt;i^2=-1&lt;/script&gt; 簡化為&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\operatorname{exp}ix=1+\frac{1}{1!}ix - \frac{1}{2!}x^2-\frac{1}{3!}ix^3+\frac{1}{4!}x^4+\frac{1}{5!}ix^5...&lt;/script&gt;

&lt;h4 id=&quot;section-7&quot;&gt;展開三角函數&lt;/h4&gt;

&lt;p&gt;要展開 &lt;script type=&quot;math/tex&quot;&gt;\operatorname{sin}x&lt;/script&gt;，需要算它在 &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; 處的各階導數：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt; &lt;script type=&quot;math/tex&quot;&gt;\operatorname{sin}0 =0&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt; &lt;script type=&quot;math/tex&quot;&gt;\operatorname{sin}&#39;0 = \operatorname{cos}0=1&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt; &lt;script type=&quot;math/tex&quot;&gt;\operatorname{sin}&#39;&#39;0 = -\operatorname{sin}0=0&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt; &lt;script type=&quot;math/tex&quot;&gt;\operatorname{sin}&#39;&#39;&#39;0 = -\operatorname{cos}0=-1&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt; &lt;script type=&quot;math/tex&quot;&gt;\operatorname{sin}&#39;&#39;&#39;&#39;0 =\operatorname{sin}0=0&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;發現是 0, 1, 0, -1, … 循環，所以&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt; \operatorname{sin}x = x-\frac{1}{3!}x^3+\frac{1}{5!}x^5-...&lt;/script&gt;

&lt;p&gt;用類似的方法可以展開 &lt;script type=&quot;math/tex&quot;&gt;\operatorname{cos}x&lt;/script&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\operatorname{cos}x = 1-\frac{1}{2!}x^2+\frac{1}{4!}x^4-...&lt;/script&gt;

&lt;h4 id=&quot;section-8&quot;&gt;證明歐拉公式&lt;/h4&gt;

&lt;p&gt; &lt;script type=&quot;math/tex&quot;&gt;\operatorname{sin}x&lt;/script&gt;、&lt;script type=&quot;math/tex&quot;&gt;\operatorname{cos}x&lt;/script&gt;、&lt;script type=&quot;math/tex&quot;&gt;e^x&lt;/script&gt; 都展開完了，接下來可以直接證明歐拉公式。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
 \operatorname{cos}x+i\operatorname{sin}x &amp;=  (1-\frac{1}{2!}x^2+\frac{1}{4!}x^4-...) + (ix-\frac{1}{3!}ix^3+\frac{1}{5!}ix^5-...)\\ 
 &amp;= 1+\frac{1}{1!}ix - \frac{1}{2!}x^2-\frac{1}{3!}ix^3+\frac{1}{4!}x^4+\frac{1}{5!}ix^5...\\
 &amp;= \operatorname{exp}ix.
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;從倒數第二行到最後一行，就是用剛剛推導出來的 &lt;script type=&quot;math/tex&quot;&gt;\operatorname{exp}ix&lt;/script&gt; 的公式。&lt;/p&gt;

&lt;p&gt;值得注意的是，複數的極式 &lt;script type=&quot;math/tex&quot;&gt;r(\cos \theta+i\sin \theta)&lt;/script&gt; 以後就要簡寫成 &lt;script type=&quot;math/tex&quot;&gt;re^{i\theta}&lt;/script&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;將三角函數寫成指數形式&lt;/h3&gt;

&lt;p&gt;根據 &lt;script type=&quot;math/tex&quot;&gt;e^{ix}=\operatorname{cos}x+i\operatorname{sin}x&lt;/script&gt; ，我們也有&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;e^{-ix}=(\operatorname{cos}-x)+(i\operatorname{sin}-x) = \operatorname{cos}x-i\operatorname{sin}x&lt;/script&gt;

&lt;p&gt;。所以&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\operatorname{cos}x=\frac{e^{ix}+e^{-ix}}{2}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\operatorname{sin}x=\frac{e^{ix}-e^{-ix}}{2i}&lt;/script&gt;

&lt;p&gt;這算是指數形式的三角函數，和 &lt;script type=&quot;math/tex&quot;&gt;\operatorname{sinh}x&lt;/script&gt;、&lt;script type=&quot;math/tex&quot;&gt;\operatorname{cosh}x&lt;/script&gt; 雷同。&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;證明棣美弗定理&lt;/h3&gt;

&lt;p&gt;棣美弗定理說明一個複數的 &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; 次方的行為：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;script type=&quot;math/tex; mode=display&quot;&gt;[r(\operatorname{cos}\theta+i\operatorname{sin}\theta)]^n=r^n(\operatorname{cos}n\theta+i\operatorname{sin}n\theta)&lt;/script&gt;

&lt;/blockquote&gt;

&lt;p&gt;棣美弗定理用歐拉公式來證明，是再簡單不過了：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;[r(\operatorname{cos}\theta+i\operatorname{sin}\theta)]^n=(re^{i\theta})^n = r^ne^{in\theta}=r^n(\operatorname{cos}n\theta+i\operatorname{sin}n\theta)&lt;/script&gt;

&lt;p&gt;這樣就證完了。&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://davidhu3141.github.io/%E9%AB%98%E4%B8%AD%E6%95%99%E6%9D%90/2016/12/01/%E6%AD%90%E6%8B%89%E5%85%AC%E5%BC%8F%E8%88%87%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B8%E7%9A%84%E6%8C%87%E6%95%B8%E5%BD%A2%E5%BC%8F.html</link>
        <guid isPermaLink="true">http://davidhu3141.github.io/%E9%AB%98%E4%B8%AD%E6%95%99%E6%9D%90/2016/12/01/%E6%AD%90%E6%8B%89%E5%85%AC%E5%BC%8F%E8%88%87%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B8%E7%9A%84%E6%8C%87%E6%95%B8%E5%BD%A2%E5%BC%8F.html</guid>
        
        
        <category>高中教材</category>
        
      </item>
    
      <item>
        <title>二元一次方程式整數解</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;二元一次方程式整數解&lt;/h1&gt;

&lt;p&gt;來證明下面的事實：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;給定 &lt;script type=&quot;math/tex&quot;&gt;a, b \in \mathbb{Z}&lt;/script&gt; ， 則二元一次方程式 &lt;script type=&quot;math/tex&quot;&gt;ax+by = c&lt;/script&gt; 有整數解的充要條件是 &lt;script type=&quot;math/tex&quot;&gt;(a, b) \mid c&lt;/script&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;分成兩部分討論：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt; &lt;script type=&quot;math/tex&quot;&gt; ax+by = c &lt;/script&gt; 有整數解 &lt;script type=&quot;math/tex&quot;&gt;\Rightarrow (a, b)|c&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt; &lt;script type=&quot;math/tex&quot;&gt;(a, b)|c\Rightarrow ax+by = c &lt;/script&gt; 有整數解&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大綱：&lt;/p&gt;

&lt;!-- TOC --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#一有整數解-\rightarrow-a-b\mid-c&quot;&gt;一、有整數解 &lt;script type=&quot;math/tex&quot;&gt;\Rightarrow (a, b)\mid c&lt;/script&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#證明過程&quot;&gt;證明過程&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#線性組合原理&quot;&gt;線性組合原理&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#二a-bc\rightarrow--有整數解&quot;&gt;二、&lt;script type=&quot;math/tex&quot;&gt;(a, b)|c\Rightarrow &lt;/script&gt; 有整數解&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#餘數會整除最大公因數&quot;&gt;餘數會整除最大公因數&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#輾轉相除法&quot;&gt;輾轉相除法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#將最大公因數-a-b-表為-manb&quot;&gt;將最大公因數 &lt;script type=&quot;math/tex&quot;&gt;(a, b)&lt;/script&gt; 表為 &lt;script type=&quot;math/tex&quot;&gt;ma+nb&lt;/script&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#開始證明第二部分&quot;&gt;開始證明第二部分&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;h3 id=&quot;script-typemathtexrightarrow-a-bmid-cscript&quot;&gt;一、有整數解 &lt;script type=&quot;math/tex&quot;&gt;\Rightarrow (a, b)\mid c&lt;/script&gt;&lt;/h3&gt;

&lt;h4 id=&quot;section-1&quot;&gt;證明過程&lt;/h4&gt;

&lt;p&gt; &lt;script type=&quot;math/tex&quot;&gt;ax+by=c&lt;/script&gt; 有整數解 &lt;script type=&quot;math/tex&quot;&gt;\Rightarrow&lt;/script&gt; 存在 &lt;script type=&quot;math/tex&quot;&gt;u, v \in \mathbb{Z}&lt;/script&gt; 使 &lt;script type=&quot;math/tex&quot;&gt;au+bv=c&lt;/script&gt;。&lt;/p&gt;

&lt;p&gt;由於 &lt;script type=&quot;math/tex&quot;&gt;(a, b)\mid a&lt;/script&gt; 且 &lt;script type=&quot;math/tex&quot;&gt;(a, b)\mid b&lt;/script&gt; ，根據&lt;strong&gt;線性組合原理&lt;/strong&gt;， &lt;script type=&quot;math/tex&quot;&gt;(a, b)\mid au+bv&lt;/script&gt; ， 即 &lt;script type=&quot;math/tex&quot;&gt;(a, b)\mid c&lt;/script&gt;，得證。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;線性組合原理&lt;/h4&gt;

&lt;p&gt;剛剛的證明用到線性組合的原理：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;若 &lt;script type=&quot;math/tex&quot;&gt;r|a&lt;/script&gt; 且 &lt;script type=&quot;math/tex&quot;&gt;r|b&lt;/script&gt; ， 則任取整數 &lt;script type=&quot;math/tex&quot;&gt;m, n \in \mathbb{Z}&lt;/script&gt; ，都有 &lt;script type=&quot;math/tex&quot;&gt;r|ma+bn&lt;/script&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;原因很直觀：&lt;/p&gt;

&lt;p&gt; &lt;script type=&quot;math/tex&quot;&gt;r|a \Rightarrow&lt;/script&gt; 存在整數 &lt;script type=&quot;math/tex&quot;&gt;k &lt;/script&gt; 使 &lt;script type=&quot;math/tex&quot;&gt;a = kr&lt;/script&gt;
 &lt;script type=&quot;math/tex&quot;&gt;r|b \Rightarrow&lt;/script&gt; 存在整數 &lt;script type=&quot;math/tex&quot;&gt;l &lt;/script&gt; 使 &lt;script type=&quot;math/tex&quot;&gt;b = lr&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;故 &lt;script type=&quot;math/tex&quot;&gt;ma+bn = kmr+lnr&lt;/script&gt; ，的確為 &lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt; 的倍數。&lt;/p&gt;

&lt;h3 id=&quot;script-typemathtexa-bcrightarrow-script-&quot;&gt;二、&lt;script type=&quot;math/tex&quot;&gt;(a, b)|c\Rightarrow &lt;/script&gt; 有整數解&lt;/h3&gt;

&lt;p&gt;證明會用到輾轉相除法和一些其他原理，先來看看：&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;餘數會整除最大公因數&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;將 &lt;script type=&quot;math/tex&quot;&gt;a, b&lt;/script&gt; 相除的過程寫成 &lt;script type=&quot;math/tex&quot;&gt;a=bq+r&lt;/script&gt;，則 &lt;script type=&quot;math/tex&quot;&gt;(a, b) | r&lt;/script&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;原因是根據線性組合原理，&lt;script type=&quot;math/tex&quot;&gt;(a, b)|a-bq&lt;/script&gt;，又 &lt;script type=&quot;math/tex&quot;&gt;a-bq=r&lt;/script&gt;，所以 &lt;script type=&quot;math/tex&quot;&gt;(a, b)|r&lt;/script&gt; 。&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;輾轉相除法&lt;/h4&gt;

&lt;p&gt;如果想要算最大公因數 &lt;script type=&quot;math/tex&quot;&gt;(a, b)&lt;/script&gt; ，根據上述原理，我們知道 &lt;script type=&quot;math/tex&quot;&gt;a, b&lt;/script&gt; 相除後，&lt;script type=&quot;math/tex&quot;&gt;(a, b)&lt;/script&gt; 會在餘數 &lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt; 的因數中，所以 &lt;script type=&quot;math/tex&quot;&gt;(a, b)=(a, b, r)=(b, r)&lt;/script&gt;。 我們只要找出 &lt;script type=&quot;math/tex&quot;&gt;(b, r)&lt;/script&gt; 即可。&lt;/p&gt;

&lt;p&gt;現在我們把 &lt;script type=&quot;math/tex&quot;&gt;b, r&lt;/script&gt; 相除，會得到新餘數 &lt;script type=&quot;math/tex&quot;&gt;r_2&lt;/script&gt;。同理我們只要找 &lt;script type=&quot;math/tex&quot;&gt;(r, r_2)&lt;/script&gt; 最大公因數即可。依序做下去的話，餘數會越來越小，但這些餘數都是 &lt;script type=&quot;math/tex&quot;&gt;(a, b)&lt;/script&gt; 的倍數，我們於是有餘數的數列：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt; &lt;script type=&quot;math/tex&quot;&gt;r, r_2, r_3, ... r_k&lt;/script&gt; ，且 &lt;script type=&quot;math/tex&quot;&gt;(a, b)&lt;/script&gt; 整除所有 &lt;script type=&quot;math/tex&quot;&gt;r_n&lt;/script&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由於餘數越來越小的的原因，最後一定會有某個 &lt;script type=&quot;math/tex&quot;&gt;r_k&lt;/script&gt; 是我們要找的 &lt;script type=&quot;math/tex&quot;&gt;(a, b)&lt;/script&gt; 。&lt;/p&gt;

&lt;p&gt;由於 &lt;script type=&quot;math/tex&quot;&gt;(a, b)|r_{k-1}&lt;/script&gt; ，故 &lt;script type=&quot;math/tex&quot;&gt;r_k | r_{k-1}&lt;/script&gt; ，也就是說這兩個餘數 &lt;script type=&quot;math/tex&quot;&gt;r_k , r_{k-1}&lt;/script&gt; 繼續做除法會整除，不會有新餘數了。&lt;/p&gt;

&lt;h4 id=&quot;script-typemathtexa-bscript--script-typemathtexmanbscript&quot;&gt;將最大公因數 &lt;script type=&quot;math/tex&quot;&gt;(a, b)&lt;/script&gt; 表為 &lt;script type=&quot;math/tex&quot;&gt;ma+nb&lt;/script&gt;&lt;/h4&gt;

&lt;p&gt;根據輾轉相除法，假設今天只做三次就找到 &lt;script type=&quot;math/tex&quot;&gt;r_3=(a, b)&lt;/script&gt;：&lt;/p&gt;

&lt;p&gt; &lt;script type=&quot;math/tex&quot;&gt;a = bq + r&lt;/script&gt; 
 &lt;script type=&quot;math/tex&quot;&gt;b = rq_2 + r_2&lt;/script&gt;
 &lt;script type=&quot;math/tex&quot;&gt;r = r_2q_3 + r_3&lt;/script&gt;
 &lt;script type=&quot;math/tex&quot;&gt;r_2 = r_3q_4&lt;/script&gt;（整除結束，&lt;script type=&quot;math/tex&quot;&gt;r_3&lt;/script&gt; 為最小公因數）&lt;/p&gt;

&lt;p&gt;根據第三個式子，我們注意到  &lt;script type=&quot;math/tex&quot;&gt;r_3&lt;/script&gt; 可以用 &lt;script type=&quot;math/tex&quot;&gt;r, r_2&lt;/script&gt; 的線性組合表示。
根據第二個式子， &lt;script type=&quot;math/tex&quot;&gt;r_2&lt;/script&gt; 又可以用 &lt;script type=&quot;math/tex&quot;&gt;b, r&lt;/script&gt; 的線性組合表示。
根據第一個式子， &lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt; 又可以用 &lt;script type=&quot;math/tex&quot;&gt;a, b&lt;/script&gt; 的線性組合表示。&lt;/p&gt;

&lt;p&gt;所以 &lt;script type=&quot;math/tex&quot;&gt;r_3&lt;/script&gt; 可以用 &lt;script type=&quot;math/tex&quot;&gt;a, b&lt;/script&gt; 的線性組合表示。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;結論： &lt;script type=&quot;math/tex&quot;&gt;(a, b)&lt;/script&gt; 總可以表為 &lt;script type=&quot;math/tex&quot;&gt;a, b&lt;/script&gt; 的線性組合。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;section-5&quot;&gt;開始證明第二部分&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;目標： &lt;script type=&quot;math/tex&quot;&gt;(a, b)|c\Rightarrow ax+by = c &lt;/script&gt; 有整數解。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;script type=&quot;math/tex&quot;&gt;(a, b)|c&lt;/script&gt; 代表 &lt;script type=&quot;math/tex&quot;&gt;c = k\cdot (a, b)&lt;/script&gt; ， 原方程式改寫為 &lt;script type=&quot;math/tex&quot;&gt;ax+by = k\cdot (a, b)&lt;/script&gt; 。&lt;/p&gt;

&lt;p&gt;剛才說 &lt;script type=&quot;math/tex&quot;&gt;(a, b)&lt;/script&gt; 總可以表為 &lt;script type=&quot;math/tex&quot;&gt;a, b&lt;/script&gt; 的線性組合，所以總存在整數 &lt;script type=&quot;math/tex&quot;&gt;m, n \in \mathbb{Z}&lt;/script&gt; 使 &lt;script type=&quot;math/tex; mode=display&quot;&gt;ma+nb=(a, b)&lt;/script&gt;。等號兩邊同乘以 &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; 得到 &lt;script type=&quot;math/tex; mode=display&quot;&gt;kma+knb=k\cdot (a, b)&lt;/script&gt;，再和剛才的 &lt;script type=&quot;math/tex; mode=display&quot;&gt;ax+by = k\cdot (a, b)&lt;/script&gt; 比較係數，得到 &lt;script type=&quot;math/tex&quot;&gt;x=km&lt;/script&gt; ， &lt;script type=&quot;math/tex&quot;&gt;y=kn&lt;/script&gt; ，得證。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: 可以練習真的去舉個例子，然後找找看找這種方程式的整數解。關鍵步驟是把 &lt;script type=&quot;math/tex&quot;&gt;(a, b)&lt;/script&gt; 表為 &lt;script type=&quot;math/tex&quot;&gt;a, b&lt;/script&gt; 的線性組合，利用輾轉相除法。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 01 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://davidhu3141.github.io/%E9%AB%98%E4%B8%AD%E6%95%99%E6%9D%90/%E4%BB%A3%E6%95%B8%E8%88%87%E7%B5%84%E5%90%88/2016/10/01/%E4%BA%8C%E5%85%83%E4%B8%80%E6%AC%A1%E6%96%B9%E7%A8%8B%E5%BC%8F%E6%95%B4%E6%95%B8%E8%A7%A3.html</link>
        <guid isPermaLink="true">http://davidhu3141.github.io/%E9%AB%98%E4%B8%AD%E6%95%99%E6%9D%90/%E4%BB%A3%E6%95%B8%E8%88%87%E7%B5%84%E5%90%88/2016/10/01/%E4%BA%8C%E5%85%83%E4%B8%80%E6%AC%A1%E6%96%B9%E7%A8%8B%E5%BC%8F%E6%95%B4%E6%95%B8%E8%A7%A3.html</guid>
        
        
        <category>高中教材</category>
        
        <category>代數與組合</category>
        
      </item>
    
      <item>
        <title>物件導向筆記 - 基礎</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;物件導向筆記 - 基礎&lt;/h1&gt;

&lt;p&gt;以前寫的筆記，好讓團隊正常的使用 Java.&lt;/p&gt;

&lt;p&gt;因為觀念大家都差不多懂了，所以重點是學習物件導向的哲學，了解「這些語法解決了什麼工程問題？」&lt;/p&gt;

&lt;p&gt;所謂工程問題，目前可以理解為「大型程式開發與維護」遇到的問題。
這種問題主要有兩大類：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;程式碼的維護。怎樣的程式架構難以維護、難以除錯、難以 Code Reuse？客戶需求改變時，程式會需要完全重寫嗎？&lt;/li&gt;
    &lt;li&gt;人員的分工。怎麼讓多人工作時彼此的程式可以銜接？誰可以改誰的 Code？權責分明是放諸四海皆準的守則。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;以下的筆記以 Java 語法為準&lt;/p&gt;

&lt;!-- TOC --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#一類別與物件&quot;&gt;一、類別與物件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#二屬性與方法&quot;&gt;二、屬性與方法&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#屬性-field&quot;&gt;屬性 Field&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#方法-method&quot;&gt;方法 Method&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#建構子&quot;&gt;建構子&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#finalize&quot;&gt;finalize&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#三封裝-encapsulation&quot;&gt;三、封裝 Encapsulation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#公有與私有&quot;&gt;公有與私有&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#在-eclipse-中快速封裝&quot;&gt;在 Eclipse 中快速封裝:&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#這樣解決了什麼工程問題&quot;&gt;這樣解決了什麼工程問題&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#四靜態屬性與方法-static-fields-and-methods&quot;&gt;四、靜態屬性與方法 Static Fields and Methods&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#舉例&quot;&gt;舉例&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#例-1這個屬性是誰的&quot;&gt;例 1：這個屬性是誰的？&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#例-2常見的例子無關物件的函數&quot;&gt;例 2：常見的例子，無關物件的函數&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#例-3有關初始化的語法&quot;&gt;例 3：有關初始化的語法&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#例-4常犯的錯誤&quot;&gt;例 4：常犯的錯誤&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#五繼承-inherit&quot;&gt;五、繼承 Inherit&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#使用時機&quot;&gt;使用時機&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#subset-必要條件&quot;&gt;Subset （必要條件）&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#code-reuse&quot;&gt;Code Reuse&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#extend-class-functionality&quot;&gt;Extend Class Functionality&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#protected-指示字&quot;&gt;Protected 指示字&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#override-annotation&quot;&gt;Override Annotation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#誤用繼承&quot;&gt;誤用繼承&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#例一子類別改變父類別的預期行為&quot;&gt;例一：子類別改變父類別的預期行為&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#例二抽象意義上不符合不應該繼承&quot;&gt;例二：抽象意義上不符合，不應該繼承&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#例三背叛父類別&quot;&gt;例三：背叛父類別&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#六抽象類別-abstract-class&quot;&gt;六、抽象類別 Abstract Class&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#使用時機-1&quot;&gt;使用時機&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#例profiledatabase&quot;&gt;例：ProfileDatabase&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#七介面-interface&quot;&gt;七、介面 Interface&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#關於語法&quot;&gt;關於語法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#使用時機-2&quot;&gt;使用時機&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#例實作-comparablehttpdocsoraclecomjavase7docsapijavautilcollectionshtmlsortjavautillist-介面&quot;&gt;例：實作 [Comparable](http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#sort(java.util.List)) 介面&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#java-官方httpsdocsoraclecomjavasetutorialjavaiandiabstracthtmlabstact_classes_compared_to_interfaces建議的使用時機&quot;&gt;[Java 官方](https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html#abstact_classes_compared_to_interfaces)建議的使用時機&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#以下情況建議使用抽象類別&quot;&gt;以下情況建議使用抽象類別&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#以下情況建議使用介面&quot;&gt;以下情況建議使用介面&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;h2 id=&quot;section-1&quot;&gt;一、類別與物件&lt;/h2&gt;

&lt;p&gt;不需要多說，類別是抽象概念（或型別）的定義，物件是依照概念而建立的具象實體（變數）。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;二、屬性與方法&lt;/h2&gt;

&lt;h3 id=&quot;field&quot;&gt;屬性 Field&lt;/h3&gt;

&lt;p&gt;這裡就不廢話了&lt;/p&gt;

&lt;h3 id=&quot;method&quot;&gt;方法 Method&lt;/h3&gt;

&lt;p&gt;這裡為特殊的方法 – 建構子與 finalize – 做補充&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;建構子&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;可以是私有的&lt;/li&gt;
  &lt;li&gt;物件的生命始於建構子，止於 GC&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;finalize&quot;&gt;finalize&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;finalize 會在 GC 時被呼叫，並不同於 C++ 的解構子，因為我們不需要自己釋放記憶體&lt;/li&gt;
  &lt;li&gt;我們不應該主動呼叫 finalize（那是 GC 的事，我們也不應該臆測 GC 的行為，&lt;strong&gt;權責分明&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;encapsulation&quot;&gt;三、封裝 Encapsulation&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;抽象化的第一步&lt;/li&gt;
  &lt;li&gt;隱藏所有實作訊息，不只是寫 getter 與 setter&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;公有與私有&lt;/h3&gt;

&lt;p&gt;大家應該都用習慣了XD
這些語法正是為封裝而生。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// package scope&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;eclipse-&quot;&gt;在 Eclipse 中快速封裝:&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;對一個 field 右鍵 &amp;gt; Refactor &amp;gt; Encapsulation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-5&quot;&gt;這樣解決了什麼工程問題&lt;/h3&gt;

&lt;p&gt;沒封裝好的例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getEdgeLengthFromArea&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/* 請各位開發者輸入非負的數，否則會噴 */&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;發現了嗎？他不應該要求所有上層開發者來看他的 code 與註解。當 code 越來越大，上層開發者會有很多地雷要閃。&lt;/p&gt;

&lt;p&gt;修正：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Square&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IllegalArgumentException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Area should be non-negative&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getEdgeLengthFromArea&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;static-fields-and-methods&quot;&gt;四、靜態屬性與方法 Static Fields and Methods&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;靜態屬性是關於類別本身的。所有 new 出來的物件、所有的 Thread 、都共用這一個變數。&lt;/li&gt;
  &lt;li&gt;非靜態屬性是物件的。每個 new 出來的物件都有自己個別的屬性&lt;/li&gt;
  &lt;li&gt;靜態方法不能存取非靜態屬性（他也不知道要從哪個 Object 取）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-6&quot;&gt;舉例&lt;/h3&gt;

&lt;h4 id=&quot;section-7&quot;&gt;例 1：這個屬性是誰的？&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AESCipher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLOCKLEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 跟 cipher 的抽象定義有關，不會因個別的 cipher 而變&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 每個 cipher 要用的 key 都不一樣&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AESCipher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){...};&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){...}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AESCipher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AESCipher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;print(cipher.BLOCKLEN)? // 不建議&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;print(AESCipher.BLOCKLEN) // 建議&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-8&quot;&gt;例 2：常見的例子，無關物件的函數&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){...}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){...}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-9&quot;&gt;例 3：有關初始化的語法&lt;/h4&gt;

&lt;p&gt;動態的初始 Assignment 在建構子
靜態的初始 Assignment 在 ClassLoader&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;等同於以下的 &lt;strong&gt;compiler sugar&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-10&quot;&gt;例 4：常犯的錯誤&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;原文出處：http://www.oreilly.com.tw/column_sleepless2.php?id=part24&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;　&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;　&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;　&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyMain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;obj.counter1==&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;counter1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;obj.counter2==&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;counter2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;沒有初始化的 counter1 初始值應該也是零，但執行結果卻會與 counter2 不同&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;counter1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;counter2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;請從**初始化乃是 compiler sugar **的角度去想&lt;/p&gt;

&lt;h2 id=&quot;inherit&quot;&gt;五、繼承 Inherit&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;extends&lt;/code&gt;關鍵字&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;使用時機&lt;/h3&gt;

&lt;h4 id=&quot;subset-&quot;&gt;Subset （必要條件）&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectInputStream&lt;/code&gt; &lt;strong&gt;is an&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Inputstream&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;AESCipher&lt;/code&gt; &lt;strong&gt;is a&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Cipher&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;DESCipher&lt;/code&gt; &lt;strong&gt;is a&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Cipher&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;code-reuse&quot;&gt;Code Reuse&lt;/h4&gt;

&lt;p&gt;不應為了 code reuse 而盲目使用繼承。要注意必要條件&lt;/p&gt;

&lt;h4 id=&quot;extend-class-functionality&quot;&gt;Extend Class Functionality&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProfileSaver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Profile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BetterProfileSaver&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProfileSaver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Profile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;                          &lt;span class=&quot;c1&quot;&gt;// reuse&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Success&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveEncryptly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Profile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// extend&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;protected-&quot;&gt;Protected 指示字&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;只有自己與子類別可以存取。&lt;/li&gt;
  &lt;li&gt;子類別是父類別的擴充，可能需要父類別的權限，所以設計此語法。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;override-annotation&quot;&gt;Override Annotation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;覆寫父類別方法時可以使用&lt;/li&gt;
  &lt;li&gt;不加也可以，但是當拼錯覆類別方法名稱的時候加了很有用&lt;/li&gt;
  &lt;li&gt;關於 Annotation 會在 Java 章節介紹&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-12&quot;&gt;誤用繼承&lt;/h3&gt;

&lt;h4 id=&quot;section-13&quot;&gt;例一：子類別改變父類別的預期行為&lt;/h4&gt;

&lt;p&gt;誇張一點的例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/* sorting */&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyList&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;deleteAllElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;總之，不要混淆使用你 code 的人&lt;/p&gt;

&lt;h4 id=&quot;section-14&quot;&gt;例二：抽象意義上不符合，不應該繼承&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserAuthenticationData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrivateKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserData&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserAuthenticationData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phoneNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bloodType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phoneNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bloodType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;UserData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;呼叫會變這樣&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 的確是可以印出來&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AuthenticatedChannel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthenticatedChannel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 這樣變成意義不明&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 原本是&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AuthenticatedChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserAuthenticationData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;要保持繼承中 &lt;strong&gt;is a&lt;/strong&gt; 的概念&lt;/p&gt;

&lt;h4 id=&quot;section-15&quot;&gt;例三：背叛父類別&lt;/h4&gt;

&lt;p&gt;或是為了揭露父類別特地去繼承&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GuessNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;revealGuessNumber&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GuessNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAnswer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Java 提供物件導向的語法，但語法並不是重點，遵守規則才是。&lt;/p&gt;

&lt;h2 id=&quot;abstract-class&quot;&gt;六、抽象類別 Abstract Class&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;定義類別的行為，卻沒有完整的實作，用來當作別人的父類別&lt;/li&gt;
  &lt;li&gt;子類別除了必須實作抽象方法之外，還必須在建構子呼叫抽象類別的建構子&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-16&quot;&gt;使用時機&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;用來分開定義與實作&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;例如&lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Set&lt;/code&gt;等容器只有定義呼叫方法，實際上再用&lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt;與&lt;code class=&quot;highlighter-rouge&quot;&gt;HashSet&lt;/code&gt;等技術來實作&lt;/li&gt;
    &lt;li&gt;可以視為&lt;strong&gt;分工&lt;/strong&gt;的界線&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;仍然蘊含有 &lt;strong&gt;is a&lt;/strong&gt; 關係，這是和&lt;a href=&quot;#八介面-interface&quot;&gt;介面&lt;/a&gt;最大的不同&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;profiledatabase&quot;&gt;例：ProfileDatabase&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProfileDatabase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProfileDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;existsTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;existsTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insertProfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Profile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryProfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HbaseProfileDatabase&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProfileDatabase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HbaseProfileDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 這裡是要呼叫，不是覆寫&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;existsTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){...}&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){...}&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insertProfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Profile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){...}&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryProfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){...}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;interface&quot;&gt;七、介面 Interface&lt;/h2&gt;

&lt;h3 id=&quot;section-17&quot;&gt;關於語法&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;介面中的屬性只能是&lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;且&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;的，就算沒加這些指示字也一樣&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-18&quot;&gt;使用時機&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;宣告&lt;strong&gt;行為&lt;/strong&gt;：實作的人要有這個函數可以呼叫
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable&lt;/code&gt;: should implement &lt;code class=&quot;highlighter-rouge&quot;&gt;public void run()&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Comparable&lt;/code&gt;: should implement &lt;code class=&quot;highlighter-rouge&quot;&gt;public int compareTo()&lt;/code&gt;. Think of &lt;strong&gt;Sorting&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;comparablehttpdocsoraclecomjavase7docsapijavautilcollectionshtmlsortjavautillist-&quot;&gt;例：實作 &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#sort(java.util.List)&quot;&gt;Comparable&lt;/a&gt; 介面&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Collections :: sort(List&amp;lt;? extends Comparable&amp;gt;)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Profile&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comparable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Profile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pflist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pflist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;也可作為&lt;strong&gt;分工&lt;/strong&gt;的界線&lt;/li&gt;
  &lt;li&gt;與抽象類別相像。如果一定要由某類特定的類別來實作，則使用抽象類別比較好&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;java-httpsdocsoraclecomjavasetutorialjavaiandiabstracthtmlabstactclassescomparedtointerfaces&quot;&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html#abstact_classes_compared_to_interfaces&quot;&gt;Java 官方&lt;/a&gt;建議的使用時機&lt;/h3&gt;

&lt;h4 id=&quot;section-19&quot;&gt;以下情況建議使用抽象類別&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;幾個緊密關聯的類別之間，想要使用同一些函數（就是關於繼承的 Code Reuse）&lt;/li&gt;
  &lt;li&gt;這些子類別的屬性或方法都雷同，只是實作不同而已
，所以如果想要宣告非&lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;或是非&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;的屬性則需要使用抽象類別&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-20&quot;&gt;以下情況建議使用介面&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;想要讓幾個無關的類別，都提供你想要的函數&lt;/li&gt;
  &lt;li&gt;你預期某些特定類別要提供這個方法，但還不知道要由誰來寫。&lt;/li&gt;
  &lt;li&gt;模擬多型&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 02 Jan 2016 00:00:00 +0800</pubDate>
        <link>http://davidhu3141.github.io/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8/2016/01/02/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E5%9F%BA%E7%A4%8E%E8%AA%9E%E6%B3%95.html</link>
        <guid isPermaLink="true">http://davidhu3141.github.io/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8/2016/01/02/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E5%9F%BA%E7%A4%8E%E8%AA%9E%E6%B3%95.html</guid>
        
        
        <category>計算機科學</category>
        
      </item>
    
      <item>
        <title>生成函數 (I)</title>
        <description>&lt;h1 id=&quot;i&quot;&gt;生成函數 (I)&lt;/h1&gt;

&lt;p&gt;最近在閱讀 Flajolet 與 Sedgewick 的 &lt;strong&gt;解析組合學 &lt;em&gt;Analytic Combinatorics&lt;/em&gt;&lt;/strong&gt;。由於這裡面提到的技巧實在太威了，決定將讀書心得以 Blog 的形式紀錄下來。&lt;/p&gt;

&lt;!-- TOC --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#什麼是解析組合學&quot;&gt;什麼是解析組合學&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#交錯排列&quot;&gt;交錯排列&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#定義交錯排列&quot;&gt;定義：《交錯排列》&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#解法script-typemathtexe_5script&quot;&gt;解法：&lt;script type=&quot;math/tex&quot;&gt;E_5&lt;/script&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#通解andrés-theorem&quot;&gt;通解：André’s theorem&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#生成函數&quot;&gt;生成函數&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#定義生成函數&quot;&gt;定義：《生成函數》&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#例子二項式係數&quot;&gt;例子：二項式係數&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#例子取球問題&quot;&gt;例子：取球問題&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#解法&quot;&gt;解法&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#取出某一項的係數還是很難&quot;&gt;取出某一項的係數還是很難&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#動差生成函數&quot;&gt;動差生成函數&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;什麼是解析組合學&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;解析組合學&lt;/strong&gt;這個名詞乍聽之下略帶違和感，因為分析（解析）和組合這兩個學問好像不太有交集。我們來看看這兩個數學中的分支：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;分析學&lt;/strong&gt;，如同我們學的微積分，主要是探討可微函數、解析函數、連續與極限等問題。&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;組合學&lt;/strong&gt;，如同中學的排列組合，包含圖論等，是離散數學的領域。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;換句話說，我們竟然可以用微積分這種&lt;strong&gt;連續&lt;/strong&gt;的手段來解決&lt;strong&gt;離散數學&lt;/strong&gt;問題，這便是 &lt;em&gt;Analytic Combinatorics&lt;/em&gt; 讓人著迷之處。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;交錯排列&lt;/h2&gt;

&lt;p&gt;在序章中，作者介紹了中學見過的&lt;strong&gt;波浪數問題&lt;/strong&gt;，或者是&lt;strong&gt;交錯排列&lt;/strong&gt;問題&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;定義：《交錯排列》&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;所謂 &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; 階&lt;strong&gt;交錯排列（Alternating Permutation）&lt;/strong&gt;是指：將 &lt;script type=&quot;math/tex&quot;&gt;1, 2, ..., n&lt;/script&gt; 等數字排列，排列的方式必須依照&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;第二個數&lt;strong&gt;大&lt;/strong&gt;於第一個數&lt;/li&gt;
    &lt;li&gt;第三個數&lt;strong&gt;小&lt;/strong&gt;於第二個數&lt;/li&gt;
    &lt;li&gt;第四個數&lt;strong&gt;大&lt;/strong&gt;於第三個數&lt;/li&gt;
    &lt;li&gt;…（以此類推）&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;而 &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; 階交錯排列的方法數記為（&lt;script type=&quot;math/tex&quot;&gt;E_n&lt;/script&gt;）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我們在這裡的問題就是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;給定 &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; ，請問 &lt;script type=&quot;math/tex&quot;&gt;E_n&lt;/script&gt; 為多少？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;script-typemathtexe5script&quot;&gt;解法：&lt;script type=&quot;math/tex&quot;&gt;E_5&lt;/script&gt;&lt;/h3&gt;

&lt;p&gt;階數不大時解法也不會太困難，用中學的手法分情況討論即可得出答案。以 &lt;script type=&quot;math/tex&quot;&gt;E_5&lt;/script&gt; 為例：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;第二、四項可能為較大的 5 或 4，而剩下的第一、三、五項則為 1, 2, 3，有 &lt;script type=&quot;math/tex&quot;&gt;2!\times 3! = 12&lt;/script&gt; 種可能&lt;/p&gt;

&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;也有可能 4 在首或尾處並緊鄰 5，則剩下三個數只要 3 在 1, 2 中間即可，有 &lt;script type=&quot;math/tex&quot;&gt;2 \times 2! = 4&lt;/script&gt; 種可能，前面的 2 是選擇 (4, 5, _ , _ , _ ) 或 ( _ , _ , _ , 5, 4)，後面的 &lt;script type=&quot;math/tex&quot;&gt;2!&lt;/script&gt; 是討論剩下的三個位置可能是 (1, 3, 2) 或 (2, 3, 1)。&lt;/p&gt;

&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;故 &lt;script type=&quot;math/tex&quot;&gt;E_5 = 2!\times 3! + 2 \times 2! = 16&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但是當 &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; 過大時，我們便缺乏適當的手段來處理這個問題了。在此，這本書的作者指出了一個極為巧妙的事實：&lt;/p&gt;

&lt;h3 id=&quot;andrs-theorem&quot;&gt;通解：André’s theorem&lt;/h3&gt;

&lt;p&gt;有一位數學家 André 證明了這件事：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;將 &lt;script type=&quot;math/tex&quot;&gt;tan(z) + sec(z)&lt;/script&gt; 表達為冪級數形式：
 &lt;script type=&quot;math/tex; mode=display&quot;&gt;tan(z) + sec(z) = 1 + \frac{1}{1!}z + \frac1{2!}z^2 +  \frac{2}{3!}z^3 + \frac5{4!}x^4 + \frac{16}{5!}z^5 + ...&lt;/script&gt;
 其中每一個 &lt;script type=&quot;math/tex&quot;&gt;z^n&lt;/script&gt; 項係數的分子即為交錯排列方法數&lt;sup id=&quot;fnref:altnum_wikip&quot;&gt;&lt;a href=&quot;#fn:altnum_wikip&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;這個公式的確頗為驚人，且不論 &lt;script type=&quot;math/tex&quot;&gt; tan(z) + sec(z) &lt;/script&gt; 乃是&lt;strong&gt;和排列組合八竿子打不著邊&lt;/strong&gt;的函數，我們竟然可以將一個解析函數展開來解決離散數學的問題！&lt;/p&gt;

&lt;p&gt;像這樣展開函數來解決方法數問題的方法，我們就稱為&lt;strong&gt;生成函數&lt;/strong&gt;，也是本書所討論的重點。不過這篇文不會探討如何推導 André’s theorem，以後可能會再寫。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;生成函數&lt;/h2&gt;

&lt;h3 id=&quot;section-4&quot;&gt;定義：《生成函數》&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;一個數列 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{A} = \{A_0, A_1, A_2, ...\}&lt;/script&gt; 的生成函數（Generating Function），是一個形式如下的冪級數：
&lt;script type=&quot;math/tex&quot;&gt;\mathcal{A}[x] = \sum_{i=0}^{\infty} A_ix^i  = A_0 + A_1x + A_2x^2 ...&lt;/script&gt;
。通常 &lt;script type=&quot;math/tex&quot;&gt;\mathcal{A}&lt;/script&gt; 可能含有能夠解決某個特定&lt;strong&gt;問題&lt;/strong&gt;&lt;sup id=&quot;fnref:sized&quot;&gt;&lt;a href=&quot;#fn:sized&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; 的訊息。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;沒錯，與一般的冪級數沒有兩樣，看起來就像是擁有無限（或有限）多項的多項式，但它的係數卻是某個問題的答案。我們來看一個各位不陌生例子：&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;例子：二項式係數&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;從 &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; 個不同顏色的球中取出 &lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt; 個，不計順序，請問有幾種可能？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;顯然答案就是組合數 &lt;script type=&quot;math/tex&quot;&gt;C^{n}_{r}&lt;/script&gt;（或者記為 &lt;script type=&quot;math/tex&quot;&gt;\mathbf{\binom{n}{r}}&lt;/script&gt;），二項式定理告訴我們，這會等同於 &lt;script type=&quot;math/tex&quot;&gt;(1+x)^n&lt;/script&gt; 展開後第 &lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt; 項的係數：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;script type=&quot;math/tex; mode=display&quot;&gt;(1+x)^n = \binom{n}{0} + \binom{n}{1}x + \binom{n}{2}x^2 + ... + \binom{n}{n}x^n&lt;/script&gt;
&lt;/blockquote&gt;

&lt;p&gt;注意到右式的係數正是我們要的答案 &lt;script type=&quot;math/tex&quot;&gt;C^{n}_{r}&lt;/script&gt; 。因此我們就可以稱 &lt;script type=&quot;math/tex&quot;&gt;(1+x)^n&lt;/script&gt; 為 &lt;script type=&quot;math/tex&quot;&gt;C^{n}_{r}&lt;/script&gt; 的&lt;strong&gt;生成函數&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;我們來複習一下：為什麼這個等式會成立呢？因為我們將 &lt;script type=&quot;math/tex&quot;&gt;(1+x)^n&lt;/script&gt; 展開時，必須要從&lt;script type=&quot;math/tex; mode=display&quot;&gt; (1+x)(1+x)(1+x) ... (1+x) &lt;/script&gt;這 &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; 個括號中各取一項（可能是 &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; 或 &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;）出來相乘，成為一個 &lt;script type=&quot;math/tex&quot;&gt;x^r&lt;/script&gt; 項（&lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt; 是多少端看我們總共從這些括號中取了多少個 &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; 出來）。&lt;/p&gt;

&lt;p&gt;由於我們總共有 &lt;script type=&quot;math/tex&quot;&gt;\binom{n}{r}&lt;/script&gt; 種方式可以從 &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; 個括號中取出 &lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt; 個 &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; 出來相乘，因此 &lt;script type=&quot;math/tex&quot;&gt;x^r&lt;/script&gt; 展開後總共會有 &lt;script type=&quot;math/tex&quot;&gt;\binom{n}{r}&lt;/script&gt; 個，組合數便反映在 &lt;script type=&quot;math/tex&quot;&gt;x^r&lt;/script&gt; 的係數上了。&lt;/p&gt;

&lt;p&gt;「把答案表為某個冪級數的係數」，正是生成函數在做的事。我們來解決一個類似的問題：&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;例子：取球問題&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;從 4 個紅球、4 個白球、4 個黑球中取出六個，不計順序，請問有幾種可能？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;用中學的方法解決這問題，我們需要先算 &lt;script type=&quot;math/tex&quot;&gt;H^3_6&lt;/script&gt; 再扣掉如 (5, 1, 0)、(6, 0, 0) 等可能性。現在我們來試試生成函數：&lt;/p&gt;

&lt;h4 id=&quot;section-7&quot;&gt;解法&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;將 &lt;script type=&quot;math/tex&quot;&gt;(1+x+x^2+x^3+x^4)^3&lt;/script&gt; 展開，取出第六項係數，便可以得到解。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;為什麼呢？當我們將這個式子展開時，總共會需要乘開三個括號，從這三個括號中各取出一項（可能是 &lt;script type=&quot;math/tex&quot;&gt;x^0&lt;/script&gt; ~ &lt;script type=&quot;math/tex&quot;&gt;x^4&lt;/script&gt;）來相乘，都可以得到展開後的某一項。這動作如同我們從三種顏色的球中取出 0 到 4 顆，例如「3 紅 2 白 1 黑」對應到下列這種展開方式：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;(...+\mathbf{\underset{take\ 3\ red}{x^3}}+...)(...+\mathbf{\underset{take\ 2\ white}{x^2}}+...)(...+\mathbf{\underset{take\ 1\ black}{x^1}}+...) \Rightarrow x^6 &lt;/script&gt;
&lt;p&gt;。&lt;/p&gt;

&lt;p&gt;所以 &lt;script type=&quot;math/tex&quot;&gt;x^6&lt;/script&gt; 的係數為多少，代表我們展開出幾個 &lt;script type=&quot;math/tex&quot;&gt;x^6&lt;/script&gt; 項，也同時代表有幾種方式可以從三種色球中取出共六顆球。&lt;/p&gt;

&lt;p&gt;– 這就是&lt;strong&gt;生成函數法解決組合學問題&lt;/strong&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-8&quot;&gt;取出某一項的係數還是很難&lt;/h3&gt;

&lt;p&gt;在大部份的時候，要手動展開一個這樣的多項式或冪級數，可能會與暴力法一樣麻煩。&lt;/p&gt;

&lt;p&gt;通常我們可以選擇用&lt;strong&gt;泰勒展開式&lt;/strong&gt;來「抽取」某一項的係數：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;script type=&quot;math/tex; mode=display&quot;&gt;t(z) = t(0) + \frac{t&#39;(0)}{1!}z + \frac{t&#39;&#39;(0)}{2!}z^2 + \frac{t&#39;&#39;&#39;(0)}{3!}z^3 +  ...&lt;/script&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt;\Rightarrow n^{th} \mathit{coefficient} =  \frac{t^{(n)}(0)}{n!}&lt;/script&gt;

&lt;/blockquote&gt;

&lt;p&gt;不過手動來說還是一樣冗，因為可能會需要做好幾次的微分。不過只要把問題表示成多項式，我們就有許多微積分的工具或是軟體可以幫我們處理這類問題。&lt;/p&gt;

&lt;p&gt;另外，也是作為本書的另一個重點，就是我們可以用複分析的工具來估計係數成長的漸進複雜度。&lt;/p&gt;

&lt;p&gt;往後的文章可能會介紹&lt;strong&gt;制式&lt;/strong&gt;的手法來為各式各樣組合學的問題找出生成函數並&lt;strong&gt;估計數量級&lt;/strong&gt;，這也是為甚麼我們偏向使用生成函數，而非為每個益智問題絞盡腦汁來想一個特殊解法。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-9&quot;&gt;動差生成函數&lt;/h2&gt;

&lt;p&gt;許多人可能也曾經在學習&lt;strong&gt;機率與統計&lt;/strong&gt;時學過&lt;strong&gt;動差母函數(Moment Generating Function)&lt;/strong&gt;，也是類似的手段：我們先對機率分佈函數 &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt; 做完 &lt;script type=&quot;math/tex; mode=display&quot;&gt;\int_{-\infty}^{\infty}e^{tx}f(x)dx&lt;/script&gt; 之後，去取它冪級數的一次項、二次項、甚至 &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; 次項係數，便可以同時得到該 &lt;script type=&quot;math/tex&quot;&gt;\mathit{pdf}&lt;/script&gt; 的期望值、變異數以及所有 &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; 階動差。動差母函數把這些資訊都反應在它的係數上，只不過機率學用的是 &lt;script type=&quot;math/tex&quot;&gt;exp(x)&lt;/script&gt; 的冪級數性質而已。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;這篇第一集就簡單介紹到這裡吧，寫了好多啊（攤）。不過這些內容在數學系的離散數學都有含括到，寫起來也不會吃力。有空會開始按照書本的順序介紹 &lt;strong&gt;Combinatorial Class&lt;/strong&gt;。它的概念有點類似排列組合中的&lt;strong&gt;所有排法&lt;/strong&gt;組成的集合，也是這本書主要探討的對象。我們將透過生成函數來為其計數。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:altnum_wikip&quot;&gt;
      &lt;p&gt;請見 &lt;a href=&quot;http://en.wikipedia.org/wiki/Alternating_permutation&quot;&gt;維基百科：André’s theorem&lt;/a&gt; &lt;a href=&quot;#fnref:altnum_wikip&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:sized&quot;&gt;
      &lt;p&gt;所謂&lt;strong&gt;問題&lt;/strong&gt;，這裡指的是 &lt;strong&gt;Combinatorial Class&lt;/strong&gt;。如有需要請參考 &lt;a href=&quot;http://en.wikipedia.org/wiki/Combinatorial_class。&quot;&gt;維基百科：Combinatorial Class&lt;/a&gt; &lt;a href=&quot;#fnref:sized&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 01 Jan 2015 00:00:00 +0800</pubDate>
        <link>http://davidhu3141.github.io/%E4%BB%A3%E6%95%B8%E8%88%87%E7%B5%84%E5%90%88/2015/01/01/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B8-(I).html</link>
        <guid isPermaLink="true">http://davidhu3141.github.io/%E4%BB%A3%E6%95%B8%E8%88%87%E7%B5%84%E5%90%88/2015/01/01/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B8-(I).html</guid>
        
        
        <category>代數與組合</category>
        
      </item>
    
  </channel>
</rss>
